{
  "version": 3,
  "sources": ["../@tsparticles/move-base/browser/Utils.js", "../@tsparticles/move-base/browser/BaseMover.js", "../@tsparticles/move-base/browser/index.js", "../@tsparticles/shape-circle/browser/Utils.js", "../@tsparticles/shape-circle/browser/CircleDrawer.js", "../@tsparticles/shape-circle/browser/index.js", "../@tsparticles/updater-color/browser/ColorUpdater.js", "../@tsparticles/updater-color/browser/index.js", "../@tsparticles/plugin-hex-color/browser/HexColorManager.js", "../@tsparticles/plugin-hex-color/browser/index.js", "../@tsparticles/plugin-hsl-color/browser/HslColorManager.js", "../@tsparticles/plugin-hsl-color/browser/index.js", "../@tsparticles/updater-opacity/browser/OpacityUpdater.js", "../@tsparticles/updater-opacity/browser/index.js", "../@tsparticles/updater-out-modes/browser/Utils.js", "../@tsparticles/updater-out-modes/browser/BounceOutMode.js", "../@tsparticles/updater-out-modes/browser/DestroyOutMode.js", "../@tsparticles/updater-out-modes/browser/NoneOutMode.js", "../@tsparticles/updater-out-modes/browser/OutOutMode.js", "../@tsparticles/updater-out-modes/browser/OutOfCanvasUpdater.js", "../@tsparticles/updater-out-modes/browser/index.js", "../@tsparticles/plugin-rgb-color/browser/RgbColorManager.js", "../@tsparticles/plugin-rgb-color/browser/index.js", "../@tsparticles/updater-size/browser/SizeUpdater.js", "../@tsparticles/updater-size/browser/index.js", "../@tsparticles/basic/browser/index.js", "../@tsparticles/plugin-easing-quad/browser/index.js", "../@tsparticles/shape-emoji/browser/Utils.js", "../@tsparticles/shape-emoji/browser/EmojiDrawer.js", "../@tsparticles/shape-emoji/browser/index.js", "../@tsparticles/interaction-external-attract/browser/Utils.js", "../@tsparticles/interaction-external-attract/browser/Options/Classes/Attract.js", "../@tsparticles/interaction-external-attract/browser/Attractor.js", "../@tsparticles/interaction-external-attract/browser/index.js", "../@tsparticles/interaction-external-bounce/browser/Utils.js", "../@tsparticles/interaction-external-bounce/browser/Options/Classes/Bounce.js", "../@tsparticles/interaction-external-bounce/browser/Bouncer.js", "../@tsparticles/interaction-external-bounce/browser/index.js", "../@tsparticles/interaction-external-bubble/browser/Options/Classes/BubbleBase.js", "../@tsparticles/interaction-external-bubble/browser/Options/Classes/BubbleDiv.js", "../@tsparticles/interaction-external-bubble/browser/Options/Classes/Bubble.js", "../@tsparticles/interaction-external-bubble/browser/Enums.js", "../@tsparticles/interaction-external-bubble/browser/Utils.js", "../@tsparticles/interaction-external-bubble/browser/Bubbler.js", "../@tsparticles/interaction-external-bubble/browser/index.js", "../@tsparticles/interaction-external-connect/browser/Options/Classes/ConnectLinks.js", "../@tsparticles/interaction-external-connect/browser/Options/Classes/Connect.js", "../@tsparticles/interaction-external-connect/browser/Utils.js", "../@tsparticles/interaction-external-connect/browser/Connector.js", "../@tsparticles/interaction-external-connect/browser/index.js", "../@tsparticles/interaction-external-grab/browser/Options/Classes/GrabLinks.js", "../@tsparticles/interaction-external-grab/browser/Options/Classes/Grab.js", "../@tsparticles/interaction-external-grab/browser/Utils.js", "../@tsparticles/interaction-external-grab/browser/Grabber.js", "../@tsparticles/interaction-external-grab/browser/index.js", "../@tsparticles/interaction-external-pause/browser/Pauser.js", "../@tsparticles/interaction-external-pause/browser/index.js", "../@tsparticles/interaction-external-push/browser/Options/Classes/Push.js", "../@tsparticles/interaction-external-push/browser/Pusher.js", "../@tsparticles/interaction-external-push/browser/index.js", "../@tsparticles/interaction-external-remove/browser/Options/Classes/Remove.js", "../@tsparticles/interaction-external-remove/browser/Remover.js", "../@tsparticles/interaction-external-remove/browser/index.js", "../@tsparticles/interaction-external-repulse/browser/Options/Classes/RepulseBase.js", "../@tsparticles/interaction-external-repulse/browser/Options/Classes/RepulseDiv.js", "../@tsparticles/interaction-external-repulse/browser/Options/Classes/Repulse.js", "../@tsparticles/interaction-external-repulse/browser/Repulser.js", "../@tsparticles/interaction-external-repulse/browser/index.js", "../@tsparticles/interaction-external-slow/browser/Options/Classes/Slow.js", "../@tsparticles/interaction-external-slow/browser/Slower.js", "../@tsparticles/interaction-external-slow/browser/index.js", "../@tsparticles/shape-image/browser/Utils.js", "../@tsparticles/shape-image/browser/GifUtils/Constants.js", "../@tsparticles/shape-image/browser/GifUtils/ByteStream.js", "../@tsparticles/shape-image/browser/GifUtils/Enums/DisposalMethod.js", "../@tsparticles/shape-image/browser/GifUtils/Types/GIFDataHeaders.js", "../@tsparticles/shape-image/browser/GifUtils/Utils.js", "../@tsparticles/shape-image/browser/ImageDrawer.js", "../@tsparticles/shape-image/browser/Options/Classes/Preload.js", "../@tsparticles/shape-image/browser/ImagePreloader.js", "../@tsparticles/shape-image/browser/index.js", "../@tsparticles/updater-life/browser/Options/Classes/LifeDelay.js", "../@tsparticles/updater-life/browser/Options/Classes/LifeDuration.js", "../@tsparticles/updater-life/browser/Options/Classes/Life.js", "../@tsparticles/updater-life/browser/Utils.js", "../@tsparticles/updater-life/browser/LifeUpdater.js", "../@tsparticles/updater-life/browser/index.js", "../@tsparticles/shape-line/browser/Utils.js", "../@tsparticles/shape-line/browser/LineDrawer.js", "../@tsparticles/shape-line/browser/index.js", "../@tsparticles/move-parallax/browser/ParallaxMover.js", "../@tsparticles/move-parallax/browser/index.js", "../@tsparticles/interaction-particles-attract/browser/Attractor.js", "../@tsparticles/interaction-particles-attract/browser/index.js", "../@tsparticles/interaction-particles-collisions/browser/Absorb.js", "../@tsparticles/interaction-particles-collisions/browser/Bounce.js", "../@tsparticles/interaction-particles-collisions/browser/Destroy.js", "../@tsparticles/interaction-particles-collisions/browser/ResolveCollision.js", "../@tsparticles/interaction-particles-collisions/browser/Collider.js", "../@tsparticles/interaction-particles-collisions/browser/index.js", "../@tsparticles/interaction-particles-links/browser/CircleWarp.js", "../@tsparticles/interaction-particles-links/browser/Options/Classes/LinksShadow.js", "../@tsparticles/interaction-particles-links/browser/Options/Classes/LinksTriangle.js", "../@tsparticles/interaction-particles-links/browser/Options/Classes/Links.js", "../@tsparticles/interaction-particles-links/browser/Linker.js", "../@tsparticles/interaction-particles-links/browser/interaction.js", "../@tsparticles/interaction-particles-links/browser/Utils.js", "../@tsparticles/interaction-particles-links/browser/LinkInstance.js", "../@tsparticles/interaction-particles-links/browser/LinksPlugin.js", "../@tsparticles/interaction-particles-links/browser/plugin.js", "../@tsparticles/interaction-particles-links/browser/index.js", "../@tsparticles/shape-polygon/browser/Utils.js", "../@tsparticles/shape-polygon/browser/PolygonDrawerBase.js", "../@tsparticles/shape-polygon/browser/PolygonDrawer.js", "../@tsparticles/shape-polygon/browser/TriangleDrawer.js", "../@tsparticles/shape-polygon/browser/index.js", "../@tsparticles/updater-rotate/browser/Options/Classes/RotateAnimation.js", "../@tsparticles/updater-rotate/browser/Options/Classes/Rotate.js", "../@tsparticles/updater-rotate/browser/RotateUpdater.js", "../@tsparticles/updater-rotate/browser/index.js", "../@tsparticles/shape-square/browser/Utils.js", "../@tsparticles/shape-square/browser/SquareDrawer.js", "../@tsparticles/shape-square/browser/index.js", "../@tsparticles/shape-star/browser/Utils.js", "../@tsparticles/shape-star/browser/StarDrawer.js", "../@tsparticles/shape-star/browser/index.js", "../@tsparticles/updater-stroke-color/browser/StrokeColorUpdater.js", "../@tsparticles/updater-stroke-color/browser/index.js", "../@tsparticles/slim/browser/index.js"],
  "sourcesContent": ["import { RotateDirection, clamp, getDistance, getDistances, getRandom, getRangeValue, } from \"@tsparticles/engine\";\nconst half = 0.5, double = 2, minVelocity = 0, identity = 1, moveSpeedFactor = 60, minSpinRadius = 0, spinFactor = 0.01, doublePI = Math.PI * double;\nexport function applyDistance(particle) {\n    const initialPosition = particle.initialPosition, { dx, dy } = getDistances(initialPosition, particle.position), dxFixed = Math.abs(dx), dyFixed = Math.abs(dy), { maxDistance } = particle.retina, hDistance = maxDistance.horizontal, vDistance = maxDistance.vertical;\n    if (!hDistance && !vDistance) {\n        return;\n    }\n    const hasHDistance = (hDistance && dxFixed >= hDistance) ?? false, hasVDistance = (vDistance && dyFixed >= vDistance) ?? false;\n    if ((hasHDistance || hasVDistance) && !particle.misplaced) {\n        particle.misplaced = (!!hDistance && dxFixed > hDistance) || (!!vDistance && dyFixed > vDistance);\n        if (hDistance) {\n            particle.velocity.x = particle.velocity.y * half - particle.velocity.x;\n        }\n        if (vDistance) {\n            particle.velocity.y = particle.velocity.x * half - particle.velocity.y;\n        }\n    }\n    else if ((!hDistance || dxFixed < hDistance) && (!vDistance || dyFixed < vDistance) && particle.misplaced) {\n        particle.misplaced = false;\n    }\n    else if (particle.misplaced) {\n        const pos = particle.position, vel = particle.velocity;\n        if (hDistance &&\n            ((pos.x < initialPosition.x && vel.x < minVelocity) || (pos.x > initialPosition.x && vel.x > minVelocity))) {\n            vel.x *= -getRandom();\n        }\n        if (vDistance &&\n            ((pos.y < initialPosition.y && vel.y < minVelocity) || (pos.y > initialPosition.y && vel.y > minVelocity))) {\n            vel.y *= -getRandom();\n        }\n    }\n}\nexport function move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta) {\n    applyPath(particle, delta);\n    const gravityOptions = particle.gravity, gravityFactor = gravityOptions?.enable && gravityOptions.inverse ? -identity : identity;\n    if (moveDrift && moveSpeed) {\n        particle.velocity.x += (moveDrift * delta.factor) / (moveSpeedFactor * moveSpeed);\n    }\n    if (gravityOptions?.enable && moveSpeed) {\n        particle.velocity.y +=\n            (gravityFactor * (gravityOptions.acceleration * delta.factor)) / (moveSpeedFactor * moveSpeed);\n    }\n    const decay = particle.moveDecay;\n    particle.velocity.multTo(decay);\n    const velocity = particle.velocity.mult(moveSpeed);\n    if (gravityOptions?.enable &&\n        maxSpeed > minVelocity &&\n        ((!gravityOptions.inverse && velocity.y >= minVelocity && velocity.y >= maxSpeed) ||\n            (gravityOptions.inverse && velocity.y <= minVelocity && velocity.y <= -maxSpeed))) {\n        velocity.y = gravityFactor * maxSpeed;\n        if (moveSpeed) {\n            particle.velocity.y = velocity.y / moveSpeed;\n        }\n    }\n    const zIndexOptions = particle.options.zIndex, zVelocityFactor = (identity - particle.zIndexFactor) ** zIndexOptions.velocityRate;\n    velocity.multTo(zVelocityFactor);\n    const { position } = particle;\n    position.addTo(velocity);\n    if (moveOptions.vibrate) {\n        position.x += Math.sin(position.x * Math.cos(position.y));\n        position.y += Math.cos(position.y * Math.sin(position.x));\n    }\n}\nexport function spin(particle, moveSpeed) {\n    const container = particle.container;\n    if (!particle.spin) {\n        return;\n    }\n    const spinClockwise = particle.spin.direction === RotateDirection.clockwise, updateFunc = {\n        x: spinClockwise ? Math.cos : Math.sin,\n        y: spinClockwise ? Math.sin : Math.cos,\n    };\n    particle.position.x = particle.spin.center.x + particle.spin.radius * updateFunc.x(particle.spin.angle);\n    particle.position.y = particle.spin.center.y + particle.spin.radius * updateFunc.y(particle.spin.angle);\n    particle.spin.radius += particle.spin.acceleration;\n    const maxCanvasSize = Math.max(container.canvas.size.width, container.canvas.size.height), halfMaxSize = maxCanvasSize * half;\n    if (particle.spin.radius > halfMaxSize) {\n        particle.spin.radius = halfMaxSize;\n        particle.spin.acceleration *= -identity;\n    }\n    else if (particle.spin.radius < minSpinRadius) {\n        particle.spin.radius = minSpinRadius;\n        particle.spin.acceleration *= -identity;\n    }\n    particle.spin.angle += moveSpeed * spinFactor * (identity - particle.spin.radius / maxCanvasSize);\n}\nexport function applyPath(particle, delta) {\n    const particlesOptions = particle.options, pathOptions = particlesOptions.move.path, pathEnabled = pathOptions.enable;\n    if (!pathEnabled) {\n        return;\n    }\n    if (particle.lastPathTime <= particle.pathDelay) {\n        particle.lastPathTime += delta.value;\n        return;\n    }\n    const path = particle.pathGenerator?.generate(particle, delta);\n    if (path) {\n        particle.velocity.addTo(path);\n    }\n    if (pathOptions.clamp) {\n        particle.velocity.x = clamp(particle.velocity.x, -identity, identity);\n        particle.velocity.y = clamp(particle.velocity.y, -identity, identity);\n    }\n    particle.lastPathTime -= particle.pathDelay;\n}\nexport function getProximitySpeedFactor(particle) {\n    return particle.slow.inRange ? particle.slow.factor : identity;\n}\nexport function initSpin(particle) {\n    const container = particle.container, options = particle.options, spinOptions = options.move.spin;\n    if (!spinOptions.enable) {\n        return;\n    }\n    const spinPos = spinOptions.position ?? { x: 50, y: 50 }, spinFactor = 0.01, spinCenter = {\n        x: spinPos.x * spinFactor * container.canvas.size.width,\n        y: spinPos.y * spinFactor * container.canvas.size.height,\n    }, pos = particle.getPosition(), distance = getDistance(pos, spinCenter), spinAcceleration = getRangeValue(spinOptions.acceleration);\n    particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n    particle.spin = {\n        center: spinCenter,\n        direction: particle.velocity.x >= minVelocity ? RotateDirection.clockwise : RotateDirection.counterClockwise,\n        angle: getRandom() * doublePI,\n        radius: distance,\n        acceleration: particle.retina.spinAcceleration,\n    };\n}\n", "import { getRangeMax, getRangeValue } from \"@tsparticles/engine\";\nimport { applyDistance, getProximitySpeedFactor, initSpin, move, spin } from \"./Utils.js\";\nconst diffFactor = 2, defaultSizeFactor = 1, defaultDeltaFactor = 1;\nexport class BaseMover {\n    init(particle) {\n        const options = particle.options, gravityOptions = options.move.gravity;\n        particle.gravity = {\n            enable: gravityOptions.enable,\n            acceleration: getRangeValue(gravityOptions.acceleration),\n            inverse: gravityOptions.inverse,\n        };\n        initSpin(particle);\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && particle.options.move.enable;\n    }\n    move(particle, delta) {\n        const particleOptions = particle.options, moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = particle.container, pxRatio = container.retina.pixelRatio;\n        particle.retina.moveSpeed ??= getRangeValue(moveOptions.speed) * pxRatio;\n        particle.retina.moveDrift ??= getRangeValue(particle.options.move.drift) * pxRatio;\n        const slowFactor = getProximitySpeedFactor(particle), baseSpeed = particle.retina.moveSpeed * container.retina.reduceFactor, moveDrift = particle.retina.moveDrift, maxSize = getRangeMax(particleOptions.size.value) * pxRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : defaultSizeFactor, deltaFactor = delta.factor || defaultDeltaFactor, moveSpeed = (baseSpeed * sizeFactor * slowFactor * deltaFactor) / diffFactor, maxSpeed = particle.retina.maxSpeed ?? container.retina.maxSpeed;\n        if (moveOptions.spin.enable) {\n            spin(particle, moveSpeed);\n        }\n        else {\n            move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta);\n        }\n        applyDistance(particle);\n    }\n}\n", "import { BaseMover } from \"./BaseMover.js\";\nexport async function loadBaseMover(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addMover(\"base\", () => {\n        return Promise.resolve(new BaseMover());\n    }, refresh);\n}\n", "const double = 2, doublePI = Math.PI * double, minAngle = 0, origin = { x: 0, y: 0 };\nexport function drawCircle(data) {\n    const { context, particle, radius } = data;\n    if (!particle.circleRange) {\n        particle.circleRange = { min: minAngle, max: doublePI };\n    }\n    const circleRange = particle.circleRange;\n    context.arc(origin.x, origin.y, radius, circleRange.min, circleRange.max, false);\n}\n", "import { degToRad, isObject } from \"@tsparticles/engine\";\nimport { drawCircle } from \"./Utils.js\";\nconst sides = 12, maxAngle = 360, minAngle = 0;\nexport class CircleDrawer {\n    constructor() {\n        this.validTypes = [\"circle\"];\n    }\n    draw(data) {\n        drawCircle(data);\n    }\n    getSidesCount() {\n        return sides;\n    }\n    particleInit(container, particle) {\n        const shapeData = particle.shapeData, angle = shapeData?.angle ?? {\n            max: maxAngle,\n            min: minAngle,\n        };\n        particle.circleRange = !isObject(angle)\n            ? {\n                min: minAngle,\n                max: degToRad(angle),\n            }\n            : { min: degToRad(angle.min), max: degToRad(angle.max) };\n    }\n}\n", "import { CircleDrawer } from \"./CircleDrawer.js\";\nexport async function loadCircleShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new CircleDrawer(), refresh);\n}\n", "import { getHslAnimationFromHsl, rangeColorToHsl, updateColor, } from \"@tsparticles/engine\";\nexport class ColorUpdater {\n    constructor(container, engine) {\n        this._container = container;\n        this._engine = engine;\n    }\n    init(particle) {\n        const hslColor = rangeColorToHsl(this._engine, particle.options.color, particle.id, particle.options.reduceDuplicates);\n        if (hslColor) {\n            particle.color = getHslAnimationFromHsl(hslColor, particle.options.color.animation, this._container.retina.reduceFactor);\n        }\n    }\n    isEnabled(particle) {\n        const { h: hAnimation, s: sAnimation, l: lAnimation } = particle.options.color.animation, { color } = particle;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            ((color?.h.value !== undefined && hAnimation.enable) ||\n                (color?.s.value !== undefined && sAnimation.enable) ||\n                (color?.l.value !== undefined && lAnimation.enable)));\n    }\n    update(particle, delta) {\n        updateColor(particle.color, delta);\n    }\n}\n", "import { ColorUpdater } from \"./ColorUpdater.js\";\nexport async function loadColorUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"color\", container => {\n        return Promise.resolve(new ColorUpdater(container, engine));\n    }, refresh);\n}\n", "var RgbIndexes;\n(function (RgbIndexes) {\n    RgbIndexes[RgbIndexes[\"r\"] = 1] = \"r\";\n    RgbIndexes[RgbIndexes[\"g\"] = 2] = \"g\";\n    RgbIndexes[RgbIndexes[\"b\"] = 3] = \"b\";\n    RgbIndexes[RgbIndexes[\"a\"] = 4] = \"a\";\n})(RgbIndexes || (RgbIndexes = {}));\nconst shorthandHexRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])([a-f\\d])?$/i, hexRegex = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})?$/i, hexRadix = 16, defaultAlpha = 1, alphaFactor = 0xff;\nexport class HexColorManager {\n    constructor() {\n        this.key = \"hex\";\n        this.stringPrefix = \"#\";\n    }\n    handleColor(color) {\n        return this._parseString(color.value);\n    }\n    handleRangeColor(color) {\n        return this._parseString(color.value);\n    }\n    parseString(input) {\n        return this._parseString(input);\n    }\n    _parseString(hexColor) {\n        if (typeof hexColor !== \"string\") {\n            return;\n        }\n        if (!hexColor?.startsWith(this.stringPrefix)) {\n            return;\n        }\n        const hexFixed = hexColor.replace(shorthandHexRegex, (_, r, g, b, a) => {\n            return r + r + g + g + b + b + (a !== undefined ? a + a : \"\");\n        }), result = hexRegex.exec(hexFixed);\n        return result\n            ? {\n                a: result[RgbIndexes.a] !== undefined\n                    ? parseInt(result[RgbIndexes.a], hexRadix) / alphaFactor\n                    : defaultAlpha,\n                b: parseInt(result[RgbIndexes.b], hexRadix),\n                g: parseInt(result[RgbIndexes.g], hexRadix),\n                r: parseInt(result[RgbIndexes.r], hexRadix),\n            }\n            : undefined;\n    }\n}\n", "import { HexColorManager } from \"./HexColorManager.js\";\nexport async function loadHexColorPlugin(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addColorManager(new HexColorManager(), refresh);\n}\n", "import { getRangeValue, hslToRgb, hslaToRgba, parseAlpha, } from \"@tsparticles/engine\";\nvar HslIndexes;\n(function (HslIndexes) {\n    HslIndexes[HslIndexes[\"h\"] = 1] = \"h\";\n    HslIndexes[HslIndexes[\"s\"] = 2] = \"s\";\n    HslIndexes[HslIndexes[\"l\"] = 3] = \"l\";\n    HslIndexes[HslIndexes[\"a\"] = 5] = \"a\";\n})(HslIndexes || (HslIndexes = {}));\nexport class HslColorManager {\n    constructor() {\n        this.key = \"hsl\";\n        this.stringPrefix = \"hsl\";\n    }\n    handleColor(color) {\n        const colorValue = color.value, hslColor = colorValue.hsl ?? color.value;\n        if (hslColor.h !== undefined && hslColor.s !== undefined && hslColor.l !== undefined) {\n            return hslToRgb(hslColor);\n        }\n    }\n    handleRangeColor(color) {\n        const colorValue = color.value, hslColor = colorValue.hsl ?? color.value;\n        if (hslColor.h !== undefined && hslColor.l !== undefined) {\n            return hslToRgb({\n                h: getRangeValue(hslColor.h),\n                l: getRangeValue(hslColor.l),\n                s: getRangeValue(hslColor.s),\n            });\n        }\n    }\n    parseString(input) {\n        if (!input.startsWith(\"hsl\")) {\n            return;\n        }\n        const regex = /hsla?\\(\\s*(\\d+)\\s*[\\s,]\\s*(\\d+)%\\s*[\\s,]\\s*(\\d+)%\\s*([\\s,]\\s*(0|1|0?\\.\\d+|(\\d{1,3})%)\\s*)?\\)/i, result = regex.exec(input), minLength = 4, defaultAlpha = 1, radix = 10;\n        return result\n            ? hslaToRgba({\n                a: result.length > minLength ? parseAlpha(result[HslIndexes.a]) : defaultAlpha,\n                h: parseInt(result[HslIndexes.h], radix),\n                l: parseInt(result[HslIndexes.l], radix),\n                s: parseInt(result[HslIndexes.s], radix),\n            })\n            : undefined;\n    }\n}\n", "import { HslColorManager } from \"./HslColorManager.js\";\nexport async function loadHslColorPlugin(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addColorManager(new HslColorManager(), refresh);\n}\n", "import { getRandom, getRangeValue, initParticleNumericAnimationValue, percentDenominator, updateAnimation, } from \"@tsparticles/engine\";\nexport class OpacityUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const opacityOptions = particle.options.opacity, pxRatio = 1;\n        particle.opacity = initParticleNumericAnimationValue(opacityOptions, pxRatio);\n        const opacityAnimation = opacityOptions.animation;\n        if (opacityAnimation.enable) {\n            particle.opacity.velocity =\n                (getRangeValue(opacityAnimation.speed) / percentDenominator) * this.container.retina.reduceFactor;\n            if (!opacityAnimation.sync) {\n                particle.opacity.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        const none = 0;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!particle.opacity &&\n            particle.opacity.enable &&\n            ((particle.opacity.maxLoops ?? none) <= none ||\n                ((particle.opacity.maxLoops ?? none) > none &&\n                    (particle.opacity.loops ?? none) < (particle.opacity.maxLoops ?? none))));\n    }\n    reset(particle) {\n        if (particle.opacity) {\n            particle.opacity.time = 0;\n            particle.opacity.loops = 0;\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.opacity) {\n            return;\n        }\n        updateAnimation(particle, particle.opacity, true, particle.options.opacity.animation.destroy, delta);\n    }\n}\n", "import { OpacityUpdater } from \"./OpacityUpdater.js\";\nexport async function loadOpacityUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"opacity\", container => {\n        return Promise.resolve(new OpacityUpdater(container));\n    }, refresh);\n}\n", "import { OutMode, OutModeDirection, getRangeValue } from \"@tsparticles/engine\";\nconst minVelocity = 0, boundsMin = 0;\nexport function bounceHorizontal(data) {\n    if ((data.outMode !== OutMode.bounce && data.outMode !== OutMode.split) ||\n        (data.direction !== OutModeDirection.left && data.direction !== OutModeDirection.right)) {\n        return;\n    }\n    if (data.bounds.right < boundsMin && data.direction === OutModeDirection.left) {\n        data.particle.position.x = data.size + data.offset.x;\n    }\n    else if (data.bounds.left > data.canvasSize.width && data.direction === OutModeDirection.right) {\n        data.particle.position.x = data.canvasSize.width - data.size - data.offset.x;\n    }\n    const velocity = data.particle.velocity.x;\n    let bounced = false;\n    if ((data.direction === OutModeDirection.right &&\n        data.bounds.right >= data.canvasSize.width &&\n        velocity > minVelocity) ||\n        (data.direction === OutModeDirection.left && data.bounds.left <= boundsMin && velocity < minVelocity)) {\n        const newVelocity = getRangeValue(data.particle.options.bounce.horizontal.value);\n        data.particle.velocity.x *= -newVelocity;\n        bounced = true;\n    }\n    if (!bounced) {\n        return;\n    }\n    const minPos = data.offset.x + data.size;\n    if (data.bounds.right >= data.canvasSize.width && data.direction === OutModeDirection.right) {\n        data.particle.position.x = data.canvasSize.width - minPos;\n    }\n    else if (data.bounds.left <= boundsMin && data.direction === OutModeDirection.left) {\n        data.particle.position.x = minPos;\n    }\n    if (data.outMode === OutMode.split) {\n        data.particle.destroy();\n    }\n}\nexport function bounceVertical(data) {\n    if ((data.outMode !== OutMode.bounce && data.outMode !== OutMode.split) ||\n        (data.direction !== OutModeDirection.bottom && data.direction !== OutModeDirection.top)) {\n        return;\n    }\n    if (data.bounds.bottom < boundsMin && data.direction === OutModeDirection.top) {\n        data.particle.position.y = data.size + data.offset.y;\n    }\n    else if (data.bounds.top > data.canvasSize.height && data.direction === OutModeDirection.bottom) {\n        data.particle.position.y = data.canvasSize.height - data.size - data.offset.y;\n    }\n    const velocity = data.particle.velocity.y;\n    let bounced = false;\n    if ((data.direction === OutModeDirection.bottom &&\n        data.bounds.bottom >= data.canvasSize.height &&\n        velocity > minVelocity) ||\n        (data.direction === OutModeDirection.top && data.bounds.top <= boundsMin && velocity < minVelocity)) {\n        const newVelocity = getRangeValue(data.particle.options.bounce.vertical.value);\n        data.particle.velocity.y *= -newVelocity;\n        bounced = true;\n    }\n    if (!bounced) {\n        return;\n    }\n    const minPos = data.offset.y + data.size;\n    if (data.bounds.bottom >= data.canvasSize.height && data.direction === OutModeDirection.bottom) {\n        data.particle.position.y = data.canvasSize.height - minPos;\n    }\n    else if (data.bounds.top <= boundsMin && data.direction === OutModeDirection.top) {\n        data.particle.position.y = minPos;\n    }\n    if (data.outMode === OutMode.split) {\n        data.particle.destroy();\n    }\n}\n", "import { OutMode, calculateBounds, } from \"@tsparticles/engine\";\nimport { bounceHorizontal, bounceVertical } from \"./Utils.js\";\nexport class BounceOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [\n            OutMode.bounce,\n            OutMode.split,\n        ];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        let handled = false;\n        for (const plugin of container.plugins.values()) {\n            if (plugin.particleBounce !== undefined) {\n                handled = plugin.particleBounce(particle, delta, direction);\n            }\n            if (handled) {\n                break;\n            }\n        }\n        if (handled) {\n            return;\n        }\n        const pos = particle.getPosition(), offset = particle.offset, size = particle.getRadius(), bounds = calculateBounds(pos, size), canvasSize = container.canvas.size;\n        bounceHorizontal({ particle, outMode, direction, bounds, canvasSize, offset, size });\n        bounceVertical({ particle, outMode, direction, bounds, canvasSize, offset, size });\n    }\n}\n", "import { OutMode, ParticleOutType, Vector, getDistances, isPointInside, } from \"@tsparticles/engine\";\nconst minVelocity = 0;\nexport class DestroyOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [OutMode.destroy];\n    }\n    update(particle, direction, _delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        switch (particle.outType) {\n            case ParticleOutType.normal:\n            case ParticleOutType.outside:\n                if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {\n                    return;\n                }\n                break;\n            case ParticleOutType.inside: {\n                const { dx, dy } = getDistances(particle.position, particle.moveCenter), { x: vx, y: vy } = particle.velocity;\n                if ((vx < minVelocity && dx > particle.moveCenter.radius) ||\n                    (vy < minVelocity && dy > particle.moveCenter.radius) ||\n                    (vx >= minVelocity && dx < -particle.moveCenter.radius) ||\n                    (vy >= minVelocity && dy < -particle.moveCenter.radius)) {\n                    return;\n                }\n                break;\n            }\n        }\n        container.particles.remove(particle, particle.group, true);\n    }\n}\n", "import { OutMode, OutModeDirection, Vector, isPointInside, } from \"@tsparticles/engine\";\nconst minVelocity = 0;\nexport class NoneOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [OutMode.none];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        if ((particle.options.move.distance.horizontal &&\n            (direction === OutModeDirection.left || direction === OutModeDirection.right)) ??\n            (particle.options.move.distance.vertical &&\n                (direction === OutModeDirection.top || direction === OutModeDirection.bottom))) {\n            return;\n        }\n        const gravityOptions = particle.options.move.gravity, container = this.container, canvasSize = container.canvas.size, pRadius = particle.getRadius();\n        if (!gravityOptions.enable) {\n            if ((particle.velocity.y > minVelocity && particle.position.y <= canvasSize.height + pRadius) ||\n                (particle.velocity.y < minVelocity && particle.position.y >= -pRadius) ||\n                (particle.velocity.x > minVelocity && particle.position.x <= canvasSize.width + pRadius) ||\n                (particle.velocity.x < minVelocity && particle.position.x >= -pRadius)) {\n                return;\n            }\n            if (!isPointInside(particle.position, container.canvas.size, Vector.origin, pRadius, direction)) {\n                container.particles.remove(particle);\n            }\n        }\n        else {\n            const position = particle.position;\n            if ((!gravityOptions.inverse &&\n                position.y > canvasSize.height + pRadius &&\n                direction === OutModeDirection.bottom) ||\n                (gravityOptions.inverse && position.y < -pRadius && direction === OutModeDirection.top)) {\n                container.particles.remove(particle);\n            }\n        }\n    }\n}\n", "import { OutMode, OutModeDirection, ParticleOutType, Vector, calculateBounds, getDistances, getRandom, isPointInside, randomInRange, } from \"@tsparticles/engine\";\nconst minVelocity = 0, minDistance = 0;\nexport class OutOutMode {\n    constructor(container) {\n        this.container = container;\n        this.modes = [OutMode.out];\n    }\n    update(particle, direction, delta, outMode) {\n        if (!this.modes.includes(outMode)) {\n            return;\n        }\n        const container = this.container;\n        switch (particle.outType) {\n            case ParticleOutType.inside: {\n                const { x: vx, y: vy } = particle.velocity;\n                const circVec = Vector.origin;\n                circVec.length = particle.moveCenter.radius;\n                circVec.angle = particle.velocity.angle + Math.PI;\n                circVec.addTo(Vector.create(particle.moveCenter));\n                const { dx, dy } = getDistances(particle.position, circVec);\n                if ((vx <= minVelocity && dx >= minDistance) ||\n                    (vy <= minVelocity && dy >= minDistance) ||\n                    (vx >= minVelocity && dx <= minDistance) ||\n                    (vy >= minVelocity && dy <= minDistance)) {\n                    return;\n                }\n                particle.position.x = Math.floor(randomInRange({\n                    min: 0,\n                    max: container.canvas.size.width,\n                }));\n                particle.position.y = Math.floor(randomInRange({\n                    min: 0,\n                    max: container.canvas.size.height,\n                }));\n                const { dx: newDx, dy: newDy } = getDistances(particle.position, particle.moveCenter);\n                particle.direction = Math.atan2(-newDy, -newDx);\n                particle.velocity.angle = particle.direction;\n                break;\n            }\n            default: {\n                if (isPointInside(particle.position, container.canvas.size, Vector.origin, particle.getRadius(), direction)) {\n                    return;\n                }\n                switch (particle.outType) {\n                    case ParticleOutType.outside: {\n                        particle.position.x =\n                            Math.floor(randomInRange({\n                                min: -particle.moveCenter.radius,\n                                max: particle.moveCenter.radius,\n                            })) + particle.moveCenter.x;\n                        particle.position.y =\n                            Math.floor(randomInRange({\n                                min: -particle.moveCenter.radius,\n                                max: particle.moveCenter.radius,\n                            })) + particle.moveCenter.y;\n                        const { dx, dy } = getDistances(particle.position, particle.moveCenter);\n                        if (particle.moveCenter.radius) {\n                            particle.direction = Math.atan2(dy, dx);\n                            particle.velocity.angle = particle.direction;\n                        }\n                        break;\n                    }\n                    case ParticleOutType.normal: {\n                        const warp = particle.options.move.warp, canvasSize = container.canvas.size, newPos = {\n                            bottom: canvasSize.height + particle.getRadius() + particle.offset.y,\n                            left: -particle.getRadius() - particle.offset.x,\n                            right: canvasSize.width + particle.getRadius() + particle.offset.x,\n                            top: -particle.getRadius() - particle.offset.y,\n                        }, sizeValue = particle.getRadius(), nextBounds = calculateBounds(particle.position, sizeValue);\n                        if (direction === OutModeDirection.right &&\n                            nextBounds.left > canvasSize.width + particle.offset.x) {\n                            particle.position.x = newPos.left;\n                            particle.initialPosition.x = particle.position.x;\n                            if (!warp) {\n                                particle.position.y = getRandom() * canvasSize.height;\n                                particle.initialPosition.y = particle.position.y;\n                            }\n                        }\n                        else if (direction === OutModeDirection.left && nextBounds.right < -particle.offset.x) {\n                            particle.position.x = newPos.right;\n                            particle.initialPosition.x = particle.position.x;\n                            if (!warp) {\n                                particle.position.y = getRandom() * canvasSize.height;\n                                particle.initialPosition.y = particle.position.y;\n                            }\n                        }\n                        if (direction === OutModeDirection.bottom &&\n                            nextBounds.top > canvasSize.height + particle.offset.y) {\n                            if (!warp) {\n                                particle.position.x = getRandom() * canvasSize.width;\n                                particle.initialPosition.x = particle.position.x;\n                            }\n                            particle.position.y = newPos.top;\n                            particle.initialPosition.y = particle.position.y;\n                        }\n                        else if (direction === OutModeDirection.top && nextBounds.bottom < -particle.offset.y) {\n                            if (!warp) {\n                                particle.position.x = getRandom() * canvasSize.width;\n                                particle.initialPosition.x = particle.position.x;\n                            }\n                            particle.position.y = newPos.bottom;\n                            particle.initialPosition.y = particle.position.y;\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n}\n", "import { OutMode, OutModeDirection, } from \"@tsparticles/engine\";\nimport { BounceOutMode } from \"./BounceOutMode.js\";\nimport { DestroyOutMode } from \"./DestroyOutMode.js\";\nimport { NoneOutMode } from \"./NoneOutMode.js\";\nimport { OutOutMode } from \"./OutOutMode.js\";\nconst checkOutMode = (outModes, outMode) => {\n    return (outModes.default === outMode ||\n        outModes.bottom === outMode ||\n        outModes.left === outMode ||\n        outModes.right === outMode ||\n        outModes.top === outMode);\n};\nexport class OutOfCanvasUpdater {\n    constructor(container) {\n        this._addUpdaterIfMissing = (particle, outMode, getUpdater) => {\n            const outModes = particle.options.move.outModes;\n            if (!this.updaters.has(outMode) && checkOutMode(outModes, outMode)) {\n                this.updaters.set(outMode, getUpdater(this.container));\n            }\n        };\n        this._updateOutMode = (particle, delta, outMode, direction) => {\n            for (const updater of this.updaters.values()) {\n                updater.update(particle, direction, delta, outMode);\n            }\n        };\n        this.container = container;\n        this.updaters = new Map();\n    }\n    init(particle) {\n        this._addUpdaterIfMissing(particle, OutMode.bounce, container => new BounceOutMode(container));\n        this._addUpdaterIfMissing(particle, OutMode.out, container => new OutOutMode(container));\n        this._addUpdaterIfMissing(particle, OutMode.destroy, container => new DestroyOutMode(container));\n        this._addUpdaterIfMissing(particle, OutMode.none, container => new NoneOutMode(container));\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning;\n    }\n    update(particle, delta) {\n        const outModes = particle.options.move.outModes;\n        this._updateOutMode(particle, delta, outModes.bottom ?? outModes.default, OutModeDirection.bottom);\n        this._updateOutMode(particle, delta, outModes.left ?? outModes.default, OutModeDirection.left);\n        this._updateOutMode(particle, delta, outModes.right ?? outModes.default, OutModeDirection.right);\n        this._updateOutMode(particle, delta, outModes.top ?? outModes.default, OutModeDirection.top);\n    }\n}\n", "import { OutOfCanvasUpdater } from \"./OutOfCanvasUpdater.js\";\nexport async function loadOutModesUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"outModes\", container => {\n        return Promise.resolve(new OutOfCanvasUpdater(container));\n    }, refresh);\n}\n", "import { getRangeValue, parseAlpha, } from \"@tsparticles/engine\";\nvar RgbIndexes;\n(function (RgbIndexes) {\n    RgbIndexes[RgbIndexes[\"r\"] = 1] = \"r\";\n    RgbIndexes[RgbIndexes[\"g\"] = 2] = \"g\";\n    RgbIndexes[RgbIndexes[\"b\"] = 3] = \"b\";\n    RgbIndexes[RgbIndexes[\"a\"] = 5] = \"a\";\n})(RgbIndexes || (RgbIndexes = {}));\nexport class RgbColorManager {\n    constructor() {\n        this.key = \"rgb\";\n        this.stringPrefix = \"rgb\";\n    }\n    handleColor(color) {\n        const colorValue = color.value, rgbColor = colorValue.rgb ?? color.value;\n        if (rgbColor.r !== undefined) {\n            return rgbColor;\n        }\n    }\n    handleRangeColor(color) {\n        const colorValue = color.value, rgbColor = colorValue.rgb ?? color.value;\n        if (rgbColor.r !== undefined) {\n            return {\n                r: getRangeValue(rgbColor.r),\n                g: getRangeValue(rgbColor.g),\n                b: getRangeValue(rgbColor.b),\n            };\n        }\n    }\n    parseString(input) {\n        if (!input.startsWith(this.stringPrefix)) {\n            return;\n        }\n        const regex = /rgba?\\(\\s*(\\d{1,3})\\s*[\\s,]\\s*(\\d{1,3})\\s*[\\s,]\\s*(\\d{1,3})\\s*([\\s,]\\s*(0|1|0?\\.\\d+|(\\d{1,3})%)\\s*)?\\)/i, result = regex.exec(input), radix = 10, minLength = 4, defaultAlpha = 1;\n        return result\n            ? {\n                a: result.length > minLength ? parseAlpha(result[RgbIndexes.a]) : defaultAlpha,\n                b: parseInt(result[RgbIndexes.b], radix),\n                g: parseInt(result[RgbIndexes.g], radix),\n                r: parseInt(result[RgbIndexes.r], radix),\n            }\n            : undefined;\n    }\n}\n", "import { RgbColorManager } from \"./RgbColorManager.js\";\nexport async function loadRgbColorPlugin(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addColorManager(new RgbColorManager(), refresh);\n}\n", "import { getRandom, percentDenominator, updateAnimation, } from \"@tsparticles/engine\";\nconst minLoops = 0;\nexport class SizeUpdater {\n    init(particle) {\n        const container = particle.container, sizeOptions = particle.options.size, sizeAnimation = sizeOptions.animation;\n        if (sizeAnimation.enable) {\n            particle.size.velocity =\n                ((particle.retina.sizeAnimationSpeed ?? container.retina.sizeAnimationSpeed) / percentDenominator) *\n                    container.retina.reduceFactor;\n            if (!sizeAnimation.sync) {\n                particle.size.velocity *= getRandom();\n            }\n        }\n    }\n    isEnabled(particle) {\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            particle.size.enable &&\n            ((particle.size.maxLoops ?? minLoops) <= minLoops ||\n                ((particle.size.maxLoops ?? minLoops) > minLoops &&\n                    (particle.size.loops ?? minLoops) < (particle.size.maxLoops ?? minLoops))));\n    }\n    reset(particle) {\n        particle.size.loops = minLoops;\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateAnimation(particle, particle.size, true, particle.options.size.animation.destroy, delta);\n    }\n}\n", "import { SizeUpdater } from \"./SizeUpdater.js\";\nexport async function loadSizeUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"size\", () => {\n        return Promise.resolve(new SizeUpdater());\n    }, refresh);\n}\n", "import { loadBaseMover } from \"@tsparticles/move-base\";\nimport { loadCircleShape } from \"@tsparticles/shape-circle\";\nimport { loadColorUpdater } from \"@tsparticles/updater-color\";\nimport { loadHexColorPlugin } from \"@tsparticles/plugin-hex-color\";\nimport { loadHslColorPlugin } from \"@tsparticles/plugin-hsl-color\";\nimport { loadOpacityUpdater } from \"@tsparticles/updater-opacity\";\nimport { loadOutModesUpdater } from \"@tsparticles/updater-out-modes\";\nimport { loadRgbColorPlugin } from \"@tsparticles/plugin-rgb-color\";\nimport { loadSizeUpdater } from \"@tsparticles/updater-size\";\nexport async function loadBasic(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await loadHexColorPlugin(engine, false);\n    await loadHslColorPlugin(engine, false);\n    await loadRgbColorPlugin(engine, false);\n    await loadBaseMover(engine, false);\n    await loadCircleShape(engine, false);\n    await loadColorUpdater(engine, false);\n    await loadOpacityUpdater(engine, false);\n    await loadOutModesUpdater(engine, false);\n    await loadSizeUpdater(engine, false);\n    await engine.refresh(refresh);\n}\n", "import { EasingType } from \"@tsparticles/engine\";\nexport async function loadEasingQuadPlugin(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addEasing(EasingType.easeInQuad, value => value ** 2, false);\n    await engine.addEasing(EasingType.easeOutQuad, value => 1 - (1 - value) ** 2, false);\n    await engine.addEasing(EasingType.easeInOutQuad, value => (value < 0.5 ? 2 * value ** 2 : 1 - (-2 * value + 2) ** 2 / 2), false);\n    await engine.refresh(refresh);\n}\n", "export function drawEmoji(data, image) {\n    const { context, opacity } = data, half = 0.5, previousAlpha = context.globalAlpha;\n    if (!image) {\n        return;\n    }\n    const diameter = image.width, radius = diameter * half;\n    context.globalAlpha = opacity;\n    context.drawImage(image, -radius, -radius, diameter, diameter);\n    context.globalAlpha = previousAlpha;\n}\n", "import { executeOnSingleOrMultiple, getRangeMax, isInArray, itemFromSingleOrMultiple, loadFont, } from \"@tsparticles/engine\";\nimport { drawEmoji } from \"./Utils.js\";\nconst defaultFont = '\"Twemoji Mozilla\", Apple Color Emoji, \"Segoe UI Emoji\", \"Noto Color Emoji\", \"EmojiOne Color\"', noPadding = 0;\nexport class EmojiDrawer {\n    constructor() {\n        this.validTypes = [\"emoji\"];\n        this._emojiShapeDict = new Map();\n    }\n    destroy() {\n        for (const [key, data] of this._emojiShapeDict) {\n            if (data instanceof ImageBitmap) {\n                data?.close();\n            }\n            this._emojiShapeDict.delete(key);\n        }\n    }\n    draw(data) {\n        const key = data.particle.emojiDataKey;\n        if (!key) {\n            return;\n        }\n        const image = this._emojiShapeDict.get(key);\n        if (!image) {\n            return;\n        }\n        drawEmoji(data, image);\n    }\n    async init(container) {\n        const options = container.actualOptions, { validTypes } = this;\n        if (!validTypes.find(t => isInArray(t, options.particles.shape.type))) {\n            return;\n        }\n        const promises = [loadFont(defaultFont)], shapeOptions = validTypes\n            .map(t => options.particles.shape.options[t])\n            .find(t => !!t);\n        if (shapeOptions) {\n            executeOnSingleOrMultiple(shapeOptions, shape => {\n                if (shape.font) {\n                    promises.push(loadFont(shape.font));\n                }\n            });\n        }\n        await Promise.all(promises);\n    }\n    particleDestroy(particle) {\n        particle.emojiDataKey = undefined;\n    }\n    particleInit(_container, particle) {\n        const double = 2, shapeData = particle.shapeData;\n        if (!shapeData?.value) {\n            return;\n        }\n        const emoji = itemFromSingleOrMultiple(shapeData.value, particle.randomIndexData);\n        if (!emoji) {\n            return;\n        }\n        const emojiOptions = typeof emoji === \"string\"\n            ? {\n                font: shapeData.font ?? defaultFont,\n                padding: shapeData.padding ?? noPadding,\n                value: emoji,\n            }\n            : {\n                font: defaultFont,\n                padding: noPadding,\n                ...shapeData,\n                ...emoji,\n            }, font = emojiOptions.font, value = emojiOptions.value;\n        const key = `${value}_${font}`;\n        if (this._emojiShapeDict.has(key)) {\n            particle.emojiDataKey = key;\n            return;\n        }\n        const padding = emojiOptions.padding * double, maxSize = getRangeMax(particle.size.value), fullSize = maxSize + padding, canvasSize = fullSize * double;\n        let image;\n        if (typeof OffscreenCanvas !== \"undefined\") {\n            const canvas = new OffscreenCanvas(canvasSize, canvasSize), context = canvas.getContext(\"2d\");\n            if (!context) {\n                return;\n            }\n            context.font = `400 ${maxSize * double}px ${font}`;\n            context.textBaseline = \"middle\";\n            context.textAlign = \"center\";\n            context.fillText(value, fullSize, fullSize);\n            image = canvas.transferToImageBitmap();\n        }\n        else {\n            const canvas = document.createElement(\"canvas\");\n            canvas.width = canvasSize;\n            canvas.height = canvasSize;\n            const context = canvas.getContext(\"2d\");\n            if (!context) {\n                return;\n            }\n            context.font = `400 ${maxSize * double}px ${font}`;\n            context.textBaseline = \"middle\";\n            context.textAlign = \"center\";\n            context.fillText(value, fullSize, fullSize);\n            image = canvas;\n        }\n        this._emojiShapeDict.set(key, image);\n        particle.emojiDataKey = key;\n    }\n}\n", "import { EmojiDrawer } from \"./EmojiDrawer.js\";\nexport async function loadEmojiShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new EmojiDrawer(), refresh);\n}\n", "import { Circle, Vector, clamp, getDistances, } from \"@tsparticles/engine\";\nconst minFactor = 1, identity = 1, minRadius = 0;\nfunction processAttract(engine, container, position, attractRadius, area, queryCb) {\n    const attractOptions = container.actualOptions.interactivity.modes.attract;\n    if (!attractOptions) {\n        return;\n    }\n    const query = container.particles.quadTree.query(area, queryCb);\n    for (const particle of query) {\n        const { dx, dy, distance } = getDistances(particle.position, position), velocity = attractOptions.speed * attractOptions.factor, attractFactor = clamp(engine.getEasing(attractOptions.easing)(identity - distance / attractRadius) * velocity, minFactor, attractOptions.maxSpeed), normVec = Vector.create(!distance ? velocity : (dx / distance) * attractFactor, !distance ? velocity : (dy / distance) * attractFactor);\n        particle.position.subFrom(normVec);\n    }\n}\nexport function clickAttract(engine, container, enabledCb) {\n    if (!container.attract) {\n        container.attract = { particles: [] };\n    }\n    const { attract } = container;\n    if (!attract.finish) {\n        if (!attract.count) {\n            attract.count = 0;\n        }\n        attract.count++;\n        if (attract.count === container.particles.count) {\n            attract.finish = true;\n        }\n    }\n    if (attract.clicking) {\n        const mousePos = container.interactivity.mouse.clickPosition, attractRadius = container.retina.attractModeDistance;\n        if (!attractRadius || attractRadius < minRadius || !mousePos) {\n            return;\n        }\n        processAttract(engine, container, mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius), (p) => enabledCb(p));\n    }\n    else if (attract.clicking === false) {\n        attract.particles = [];\n    }\n}\nexport function hoverAttract(engine, container, enabledCb) {\n    const mousePos = container.interactivity.mouse.position, attractRadius = container.retina.attractModeDistance;\n    if (!attractRadius || attractRadius < minRadius || !mousePos) {\n        return;\n    }\n    processAttract(engine, container, mousePos, attractRadius, new Circle(mousePos.x, mousePos.y, attractRadius), (p) => enabledCb(p));\n}\n", "import { EasingType, isNull } from \"@tsparticles/engine\";\nexport class Attract {\n    constructor() {\n        this.distance = 200;\n        this.duration = 0.4;\n        this.easing = EasingType.easeOutQuad;\n        this.factor = 1;\n        this.maxSpeed = 50;\n        this.speed = 1;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.easing !== undefined) {\n            this.easing = data.easing;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.maxSpeed !== undefined) {\n            this.maxSpeed = data.maxSpeed;\n        }\n        if (data.speed !== undefined) {\n            this.speed = data.speed;\n        }\n    }\n}\n", "import { ExternalInteractorBase, isInArray, millisecondsToSeconds, mouseMoveEvent, } from \"@tsparticles/engine\";\nimport { clickAttract, hoverAttract } from \"./Utils.js\";\nimport { Attract } from \"./Options/Classes/Attract.js\";\nconst attractMode = \"attract\";\nexport class Attractor extends ExternalInteractorBase {\n    constructor(engine, container) {\n        super(container);\n        this._engine = engine;\n        if (!container.attract) {\n            container.attract = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions, attract = options.interactivity.modes.attract;\n            if (!attract || mode !== attractMode) {\n                return;\n            }\n            if (!container.attract) {\n                container.attract = { particles: [] };\n            }\n            container.attract.clicking = true;\n            container.attract.count = 0;\n            for (const particle of container.attract.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            container.attract.particles = [];\n            container.attract.finish = false;\n            setTimeout(() => {\n                if (container.destroyed) {\n                    return;\n                }\n                if (!container.attract) {\n                    container.attract = { particles: [] };\n                }\n                container.attract.clicking = false;\n            }, attract.duration * millisecondsToSeconds);\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, attract = container.actualOptions.interactivity.modes.attract;\n        if (!attract) {\n            return;\n        }\n        container.retina.attractModeDistance = attract.distance * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, { enable: hoverEnabled, mode: hoverMode } = events.onHover, { enable: clickEnabled, mode: clickMode } = events.onClick;\n        if (mouseMoveStatus && hoverEnabled && isInArray(attractMode, hoverMode)) {\n            hoverAttract(this._engine, this.container, p => this.isEnabled(p));\n        }\n        else if (clickEnabled && isInArray(attractMode, clickMode)) {\n            clickAttract(this._engine, this.container, p => this.isEnabled(p));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events;\n        if ((!mouse.position || !events.onHover.enable) && (!mouse.clickPosition || !events.onClick.enable)) {\n            return false;\n        }\n        const hoverMode = events.onHover.mode, clickMode = events.onClick.mode;\n        return isInArray(attractMode, hoverMode) || isInArray(attractMode, clickMode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.attract) {\n            options.attract = new Attract();\n        }\n        for (const source of sources) {\n            options.attract.load(source?.attract);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Attractor } from \"./Attractor.js\";\nexport async function loadExternalAttractInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalAttract\", container => {\n        return Promise.resolve(new Attractor(engine, container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Attract.js\";\nexport * from \"./Options/Interfaces/IAttract.js\";\n", "import { Circle, DivType, Rectangle, Vector, calculateBounds, circleBounce, circleBounceDataFromParticle, divModeExecute, rectBounce, } from \"@tsparticles/engine\";\nconst squareExp = 2, half = 0.5, halfPI = Math.PI * half, double = 2, toleranceFactor = 10, minRadius = 0;\nfunction processBounce(container, position, radius, area, enabledCb) {\n    const query = container.particles.quadTree.query(area, enabledCb);\n    for (const particle of query) {\n        if (area instanceof Circle) {\n            circleBounce(circleBounceDataFromParticle(particle), {\n                position,\n                radius,\n                mass: radius ** squareExp * halfPI,\n                velocity: Vector.origin,\n                factor: Vector.origin,\n            });\n        }\n        else if (area instanceof Rectangle) {\n            rectBounce(particle, calculateBounds(position, radius));\n        }\n    }\n}\nfunction singleSelectorBounce(container, selector, div, bounceCb) {\n    const query = document.querySelectorAll(selector);\n    if (!query.length) {\n        return;\n    }\n    query.forEach(item => {\n        const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n            x: (elem.offsetLeft + elem.offsetWidth * half) * pxRatio,\n            y: (elem.offsetTop + elem.offsetHeight * half) * pxRatio,\n        }, radius = elem.offsetWidth * half * pxRatio, tolerance = toleranceFactor * pxRatio, area = div.type === DivType.circle\n            ? new Circle(pos.x, pos.y, radius + tolerance)\n            : new Rectangle(elem.offsetLeft * pxRatio - tolerance, elem.offsetTop * pxRatio - tolerance, elem.offsetWidth * pxRatio + tolerance * double, elem.offsetHeight * pxRatio + tolerance * double);\n        bounceCb(pos, radius, area);\n    });\n}\nexport function divBounce(container, divs, bounceMode, enabledCb) {\n    divModeExecute(bounceMode, divs, (selector, div) => singleSelectorBounce(container, selector, div, (pos, radius, area) => processBounce(container, pos, radius, area, enabledCb)));\n}\nexport function mouseBounce(container, enabledCb) {\n    const pxRatio = container.retina.pixelRatio, tolerance = toleranceFactor * pxRatio, mousePos = container.interactivity.mouse.position, radius = container.retina.bounceModeDistance;\n    if (!radius || radius < minRadius || !mousePos) {\n        return;\n    }\n    processBounce(container, mousePos, radius, new Circle(mousePos.x, mousePos.y, radius + tolerance), enabledCb);\n}\n", "import { isNull } from \"@tsparticles/engine\";\nexport class Bounce {\n    constructor() {\n        this.distance = 200;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n    }\n}\n", "import { ExternalInteractorBase, isDivModeEnabled, isInArray, mouseMoveEvent, } from \"@tsparticles/engine\";\nimport { divBounce, mouseBounce } from \"./Utils.js\";\nimport { Bounce } from \"./Options/Classes/Bounce.js\";\nconst bounceMode = \"bounce\";\nexport class Bouncer extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, bounce = container.actualOptions.interactivity.modes.bounce;\n        if (!bounce) {\n            return;\n        }\n        container.retina.bounceModeDistance = bounce.distance * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions, events = options.interactivity.events, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, hoverEnabled = events.onHover.enable, hoverMode = events.onHover.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && isInArray(bounceMode, hoverMode)) {\n            mouseBounce(this.container, p => this.isEnabled(p));\n        }\n        else {\n            divBounce(this.container, divs, bounceMode, p => this.isEnabled(p));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv;\n        return ((!!mouse.position && events.onHover.enable && isInArray(bounceMode, events.onHover.mode)) ||\n            isDivModeEnabled(bounceMode, divs));\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bounce) {\n            options.bounce = new Bounce();\n        }\n        for (const source of sources) {\n            options.bounce.load(source?.bounce);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Bouncer } from \"./Bouncer.js\";\nexport async function loadExternalBounceInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalBounce\", container => {\n        return Promise.resolve(new Bouncer(container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Bounce.js\";\nexport * from \"./Options/Interfaces/IBounce.js\";\n", "import { OptionsColor, executeOnSingleOrMultiple, isArray, isNull, } from \"@tsparticles/engine\";\nexport class BubbleBase {\n    constructor() {\n        this.distance = 200;\n        this.duration = 0.4;\n        this.mix = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.mix !== undefined) {\n            this.mix = data.mix;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n        if (data.color !== undefined) {\n            const sourceColor = isArray(this.color) ? undefined : this.color;\n            this.color = executeOnSingleOrMultiple(data.color, color => {\n                return OptionsColor.create(sourceColor, color);\n            });\n        }\n        if (data.size !== undefined) {\n            this.size = data.size;\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nimport { BubbleBase } from \"./BubbleBase.js\";\nexport class BubbleDiv extends BubbleBase {\n    constructor() {\n        super();\n        this.selectors = [];\n    }\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        if (data.selectors !== undefined) {\n            this.selectors = data.selectors;\n        }\n    }\n}\n", "import { executeOnSingleOrMultiple, isNull, } from \"@tsparticles/engine\";\nimport { BubbleBase } from \"./BubbleBase.js\";\nimport { BubbleDiv } from \"./BubbleDiv.js\";\nexport class Bubble extends BubbleBase {\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        this.divs = executeOnSingleOrMultiple(data.divs, div => {\n            const tmp = new BubbleDiv();\n            tmp.load(div);\n            return tmp;\n        });\n    }\n}\n", "export var ProcessBubbleType;\n(function (ProcessBubbleType) {\n    ProcessBubbleType[\"color\"] = \"color\";\n    ProcessBubbleType[\"opacity\"] = \"opacity\";\n    ProcessBubbleType[\"size\"] = \"size\";\n})(ProcessBubbleType || (ProcessBubbleType = {}));\n", "import { clamp } from \"@tsparticles/engine\";\nexport function calculateBubbleValue(particleValue, modeValue, optionsValue, ratio) {\n    if (modeValue >= optionsValue) {\n        const value = particleValue + (modeValue - optionsValue) * ratio;\n        return clamp(value, particleValue, modeValue);\n    }\n    else if (modeValue < optionsValue) {\n        const value = particleValue - (optionsValue - modeValue) * ratio;\n        return clamp(value, modeValue, particleValue);\n    }\n}\n", "import { Circle, DivType, ExternalInteractorBase, Rectangle, colorMix, divMode, divModeExecute, getDistance, getRangeMax, isDivModeEnabled, isInArray, itemFromSingleOrMultiple, millisecondsToSeconds, mouseLeaveEvent, mouseMoveEvent, rangeColorToHsl, rgbToHsl, } from \"@tsparticles/engine\";\nimport { Bubble } from \"./Options/Classes/Bubble.js\";\nimport { ProcessBubbleType } from \"./Enums.js\";\nimport { calculateBubbleValue } from \"./Utils.js\";\nconst bubbleMode = \"bubble\", minDistance = 0, defaultClickTime = 0, double = 2, defaultOpacity = 1, ratioOffset = 1, defaultBubbleValue = 0, minRatio = 0, half = 0.5, defaultRatio = 1;\nexport class Bubbler extends ExternalInteractorBase {\n    constructor(container, engine) {\n        super(container);\n        this._clickBubble = () => {\n            const container = this.container, options = container.actualOptions, mouseClickPos = container.interactivity.mouse.clickPosition, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || !mouseClickPos) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            const distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < minDistance) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mouseClickPos, distance, p => this.isEnabled(p)), { bubble } = container;\n            for (const particle of query) {\n                if (!bubble.clicking) {\n                    continue;\n                }\n                particle.bubble.inRange = !bubble.durationEnd;\n                const pos = particle.getPosition(), distMouse = getDistance(pos, mouseClickPos), timeSpent = (new Date().getTime() - (container.interactivity.mouse.clickTime ?? defaultClickTime)) /\n                    millisecondsToSeconds;\n                if (timeSpent > bubbleOptions.duration) {\n                    bubble.durationEnd = true;\n                }\n                if (timeSpent > bubbleOptions.duration * double) {\n                    bubble.clicking = false;\n                    bubble.durationEnd = false;\n                }\n                const sizeData = {\n                    bubbleObj: {\n                        optValue: container.retina.bubbleModeSize,\n                        value: particle.bubble.radius,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.size.value) * container.retina.pixelRatio,\n                        value: particle.size.value,\n                    },\n                    type: ProcessBubbleType.size,\n                };\n                this._process(particle, distMouse, timeSpent, sizeData);\n                const opacityData = {\n                    bubbleObj: {\n                        optValue: bubbleOptions.opacity,\n                        value: particle.bubble.opacity,\n                    },\n                    particlesObj: {\n                        optValue: getRangeMax(particle.options.opacity.value),\n                        value: particle.opacity?.value ?? defaultOpacity,\n                    },\n                    type: ProcessBubbleType.opacity,\n                };\n                this._process(particle, distMouse, timeSpent, opacityData);\n                if (!bubble.durationEnd && distMouse <= distance) {\n                    this._hoverBubbleColor(particle, distMouse);\n                }\n                else {\n                    delete particle.bubble.color;\n                }\n            }\n        };\n        this._hoverBubble = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, distance = container.retina.bubbleModeDistance;\n            if (!distance || distance < minDistance || !mousePos) {\n                return;\n            }\n            const query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n            for (const particle of query) {\n                particle.bubble.inRange = true;\n                const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos), ratio = ratioOffset - pointDistance / distance;\n                if (pointDistance <= distance) {\n                    if (ratio >= minRatio && container.interactivity.status === mouseMoveEvent) {\n                        this._hoverBubbleSize(particle, ratio);\n                        this._hoverBubbleOpacity(particle, ratio);\n                        this._hoverBubbleColor(particle, ratio);\n                    }\n                }\n                else {\n                    this.reset(particle);\n                }\n                if (container.interactivity.status === mouseLeaveEvent) {\n                    this.reset(particle);\n                }\n            }\n        };\n        this._hoverBubbleColor = (particle, ratio, divBubble) => {\n            const options = this.container.actualOptions, bubbleOptions = divBubble ?? options.interactivity.modes.bubble;\n            if (!bubbleOptions) {\n                return;\n            }\n            if (!particle.bubble.finalColor) {\n                const modeColor = bubbleOptions.color;\n                if (!modeColor) {\n                    return;\n                }\n                const bubbleColor = itemFromSingleOrMultiple(modeColor);\n                particle.bubble.finalColor = rangeColorToHsl(this._engine, bubbleColor);\n            }\n            if (!particle.bubble.finalColor) {\n                return;\n            }\n            if (bubbleOptions.mix) {\n                particle.bubble.color = undefined;\n                const pColor = particle.getFillColor();\n                particle.bubble.color = pColor\n                    ? rgbToHsl(colorMix(pColor, particle.bubble.finalColor, ratioOffset - ratio, ratio))\n                    : particle.bubble.finalColor;\n            }\n            else {\n                particle.bubble.color = particle.bubble.finalColor;\n            }\n        };\n        this._hoverBubbleOpacity = (particle, ratio, divBubble) => {\n            const container = this.container, options = container.actualOptions, modeOpacity = divBubble?.opacity ?? options.interactivity.modes.bubble?.opacity;\n            if (!modeOpacity) {\n                return;\n            }\n            const optOpacity = particle.options.opacity.value, pOpacity = particle.opacity?.value ?? defaultOpacity, opacity = calculateBubbleValue(pOpacity, modeOpacity, getRangeMax(optOpacity), ratio);\n            if (opacity !== undefined) {\n                particle.bubble.opacity = opacity;\n            }\n        };\n        this._hoverBubbleSize = (particle, ratio, divBubble) => {\n            const container = this.container, modeSize = divBubble?.size ? divBubble.size * container.retina.pixelRatio : container.retina.bubbleModeSize;\n            if (modeSize === undefined) {\n                return;\n            }\n            const optSize = getRangeMax(particle.options.size.value) * container.retina.pixelRatio, pSize = particle.size.value, size = calculateBubbleValue(pSize, modeSize, optSize, ratio);\n            if (size !== undefined) {\n                particle.bubble.radius = size;\n            }\n        };\n        this._process = (particle, distMouse, timeSpent, data) => {\n            const container = this.container, bubbleParam = data.bubbleObj.optValue, options = container.actualOptions, bubbleOptions = options.interactivity.modes.bubble;\n            if (!bubbleOptions || bubbleParam === undefined) {\n                return;\n            }\n            const bubbleDuration = bubbleOptions.duration, bubbleDistance = container.retina.bubbleModeDistance, particlesParam = data.particlesObj.optValue, pObjBubble = data.bubbleObj.value, pObj = data.particlesObj.value ?? defaultBubbleValue, type = data.type;\n            if (!bubbleDistance || bubbleDistance < minDistance || bubbleParam === particlesParam) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            if (container.bubble.durationEnd) {\n                if (pObjBubble) {\n                    if (type === ProcessBubbleType.size) {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === ProcessBubbleType.opacity) {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n            else {\n                if (distMouse <= bubbleDistance) {\n                    const obj = pObjBubble ?? pObj;\n                    if (obj !== bubbleParam) {\n                        const value = pObj - (timeSpent * (pObj - bubbleParam)) / bubbleDuration;\n                        if (type === ProcessBubbleType.size) {\n                            particle.bubble.radius = value;\n                        }\n                        if (type === ProcessBubbleType.opacity) {\n                            particle.bubble.opacity = value;\n                        }\n                    }\n                }\n                else {\n                    if (type === ProcessBubbleType.size) {\n                        delete particle.bubble.radius;\n                    }\n                    if (type === ProcessBubbleType.opacity) {\n                        delete particle.bubble.opacity;\n                    }\n                }\n            }\n        };\n        this._singleSelectorHover = (delta, selector, div) => {\n            const container = this.container, selectors = document.querySelectorAll(selector), bubble = container.actualOptions.interactivity.modes.bubble;\n            if (!bubble || !selectors.length) {\n                return;\n            }\n            selectors.forEach(item => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth * half) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight * half) * pxRatio,\n                }, repulseRadius = elem.offsetWidth * half * pxRatio, area = div.type === DivType.circle\n                    ? new Circle(pos.x, pos.y, repulseRadius)\n                    : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), query = container.particles.quadTree.query(area, p => this.isEnabled(p));\n                for (const particle of query) {\n                    if (!area.contains(particle.getPosition())) {\n                        continue;\n                    }\n                    particle.bubble.inRange = true;\n                    const divs = bubble.divs, divBubble = divMode(divs, elem);\n                    if (!particle.bubble.div || particle.bubble.div !== elem) {\n                        this.clear(particle, delta, true);\n                        particle.bubble.div = elem;\n                    }\n                    this._hoverBubbleSize(particle, defaultRatio, divBubble);\n                    this._hoverBubbleOpacity(particle, defaultRatio, divBubble);\n                    this._hoverBubbleColor(particle, defaultRatio, divBubble);\n                }\n            });\n        };\n        this._engine = engine;\n        if (!container.bubble) {\n            container.bubble = {};\n        }\n        this.handleClickMode = (mode) => {\n            if (mode !== bubbleMode) {\n                return;\n            }\n            if (!container.bubble) {\n                container.bubble = {};\n            }\n            container.bubble.clicking = true;\n        };\n    }\n    clear(particle, delta, force) {\n        if (particle.bubble.inRange && !force) {\n            return;\n        }\n        delete particle.bubble.div;\n        delete particle.bubble.opacity;\n        delete particle.bubble.radius;\n        delete particle.bubble.color;\n    }\n    init() {\n        const container = this.container, bubble = container.actualOptions.interactivity.modes.bubble;\n        if (!bubble) {\n            return;\n        }\n        container.retina.bubbleModeDistance = bubble.distance * container.retina.pixelRatio;\n        if (bubble.size !== undefined) {\n            container.retina.bubbleModeSize = bubble.size * container.retina.pixelRatio;\n        }\n    }\n    interact(delta) {\n        const options = this.container.actualOptions, events = options.interactivity.events, onHover = events.onHover, onClick = events.onClick, hoverEnabled = onHover.enable, hoverMode = onHover.mode, clickEnabled = onClick.enable, clickMode = onClick.mode, divs = events.onDiv;\n        if (hoverEnabled && isInArray(bubbleMode, hoverMode)) {\n            this._hoverBubble();\n        }\n        else if (clickEnabled && isInArray(bubbleMode, clickMode)) {\n            this._clickBubble();\n        }\n        else {\n            divModeExecute(bubbleMode, divs, (selector, div) => this._singleSelectorHover(delta, selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, { onClick, onDiv, onHover } = events, divBubble = isDivModeEnabled(bubbleMode, onDiv);\n        if (!(divBubble || (onHover.enable && !!mouse.position) || (onClick.enable && mouse.clickPosition))) {\n            return false;\n        }\n        return isInArray(bubbleMode, onHover.mode) || isInArray(bubbleMode, onClick.mode) || divBubble;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.bubble) {\n            options.bubble = new Bubble();\n        }\n        for (const source of sources) {\n            options.bubble.load(source?.bubble);\n        }\n    }\n    reset(particle) {\n        particle.bubble.inRange = false;\n    }\n}\n", "import { Bubbler } from \"./Bubbler.js\";\nexport async function loadExternalBubbleInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalBubble\", container => {\n        return Promise.resolve(new Bubbler(container, engine));\n    }, refresh);\n}\nexport * from \"./Options/Classes/BubbleBase.js\";\nexport * from \"./Options/Classes/BubbleDiv.js\";\nexport * from \"./Options/Classes/Bubble.js\";\nexport * from \"./Options/Interfaces/IBubbleBase.js\";\nexport * from \"./Options/Interfaces/IBubbleDiv.js\";\nexport * from \"./Options/Interfaces/IBubble.js\";\n", "import { isNull } from \"@tsparticles/engine\";\nexport class ConnectLinks {\n    constructor() {\n        this.opacity = 0.5;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nimport { ConnectLinks } from \"./ConnectLinks.js\";\nexport class Connect {\n    constructor() {\n        this.distance = 80;\n        this.links = new ConnectLinks();\n        this.radius = 60;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        this.links.load(data.links);\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n", "import { clamp, colorMix, drawLine, getStyleFromHsl, getStyleFromRgb, } from \"@tsparticles/engine\";\nconst gradientMin = 0, gradientMax = 1, defaultLinksWidth = 0;\nexport function gradient(context, p1, p2, opacity) {\n    const gradStop = Math.floor(p2.getRadius() / p1.getRadius()), color1 = p1.getFillColor(), color2 = p2.getFillColor();\n    if (!color1 || !color2) {\n        return;\n    }\n    const sourcePos = p1.getPosition(), destPos = p2.getPosition(), midRgb = colorMix(color1, color2, p1.getRadius(), p2.getRadius()), grad = context.createLinearGradient(sourcePos.x, sourcePos.y, destPos.x, destPos.y);\n    grad.addColorStop(gradientMin, getStyleFromHsl(color1, opacity));\n    grad.addColorStop(clamp(gradStop, gradientMin, gradientMax), getStyleFromRgb(midRgb, opacity));\n    grad.addColorStop(gradientMax, getStyleFromHsl(color2, opacity));\n    return grad;\n}\nexport function drawConnectLine(context, width, lineStyle, begin, end) {\n    drawLine(context, begin, end);\n    context.lineWidth = width;\n    context.strokeStyle = lineStyle;\n    context.stroke();\n}\nexport function lineStyle(container, ctx, p1, p2) {\n    const options = container.actualOptions, connectOptions = options.interactivity.modes.connect;\n    if (!connectOptions) {\n        return;\n    }\n    return gradient(ctx, p1, p2, connectOptions.links.opacity);\n}\nexport function drawConnection(container, p1, p2) {\n    container.canvas.draw(ctx => {\n        const ls = lineStyle(container, ctx, p1, p2);\n        if (!ls) {\n            return;\n        }\n        const pos1 = p1.getPosition(), pos2 = p2.getPosition();\n        drawConnectLine(ctx, p1.retina.linksWidth ?? defaultLinksWidth, ls, pos1, pos2);\n    });\n}\n", "import { ExternalInteractorBase, isInArray, } from \"@tsparticles/engine\";\nimport { Connect } from \"./Options/Classes/Connect.js\";\nimport { drawConnection } from \"./Utils.js\";\nconst connectMode = \"connect\", minDistance = 0;\nexport class Connector extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, connect = container.actualOptions.interactivity.modes.connect;\n        if (!connect) {\n            return;\n        }\n        container.retina.connectModeDistance = connect.distance * container.retina.pixelRatio;\n        container.retina.connectModeRadius = connect.radius * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions;\n        if (options.interactivity.events.onHover.enable && container.interactivity.status === \"pointermove\") {\n            const mousePos = container.interactivity.mouse.position, { connectModeDistance, connectModeRadius } = container.retina;\n            if (!connectModeDistance ||\n                connectModeDistance < minDistance ||\n                !connectModeRadius ||\n                connectModeRadius < minDistance ||\n                !mousePos) {\n                return;\n            }\n            const distance = Math.abs(connectModeRadius), query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n            query.forEach((p1, i) => {\n                const pos1 = p1.getPosition(), indexOffset = 1;\n                for (const p2 of query.slice(i + indexOffset)) {\n                    const pos2 = p2.getPosition(), distMax = Math.abs(connectModeDistance), xDiff = Math.abs(pos1.x - pos2.x), yDiff = Math.abs(pos1.y - pos2.y);\n                    if (xDiff < distMax && yDiff < distMax) {\n                        drawConnection(container, p1, p2);\n                    }\n                }\n            });\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        if (!(events.onHover.enable && mouse.position)) {\n            return false;\n        }\n        return isInArray(connectMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.connect) {\n            options.connect = new Connect();\n        }\n        for (const source of sources) {\n            options.connect.load(source?.connect);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Connector } from \"./Connector.js\";\nexport async function loadExternalConnectInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalConnect\", container => {\n        return Promise.resolve(new Connector(container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Connect.js\";\nexport * from \"./Options/Classes/ConnectLinks.js\";\nexport * from \"./Options/Interfaces/IConnect.js\";\nexport * from \"./Options/Interfaces/IConnectLinks.js\";\n", "import { OptionsColor, isNull } from \"@tsparticles/engine\";\nexport class GrabLinks {\n    constructor() {\n        this.blink = false;\n        this.consent = false;\n        this.opacity = 1;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.blink !== undefined) {\n            this.blink = data.blink;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.consent !== undefined) {\n            this.consent = data.consent;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nimport { GrabLinks } from \"./GrabLinks.js\";\nexport class Grab {\n    constructor() {\n        this.distance = 100;\n        this.links = new GrabLinks();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        this.links.load(data.links);\n    }\n}\n", "import { drawLine, getStyleFromRgb } from \"@tsparticles/engine\";\nconst defaultWidth = 0;\nexport function drawGrabLine(context, width, begin, end, colorLine, opacity) {\n    drawLine(context, begin, end);\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    context.lineWidth = width;\n    context.stroke();\n}\nexport function drawGrab(container, particle, lineColor, opacity, mousePos) {\n    container.canvas.draw(ctx => {\n        const beginPos = particle.getPosition();\n        drawGrabLine(ctx, particle.retina.linksWidth ?? defaultWidth, beginPos, mousePos, lineColor, opacity);\n    });\n}\n", "import { ExternalInteractorBase, getDistance, getLinkColor, getLinkRandomColor, isInArray, mouseMoveEvent, } from \"@tsparticles/engine\";\nimport { Grab } from \"./Options/Classes/Grab.js\";\nimport { drawGrab } from \"./Utils.js\";\nconst grabMode = \"grab\", minDistance = 0, minOpacity = 0;\nexport class Grabber extends ExternalInteractorBase {\n    constructor(container, engine) {\n        super(container);\n        this._engine = engine;\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, grab = container.actualOptions.interactivity.modes.grab;\n        if (!grab) {\n            return;\n        }\n        container.retina.grabModeDistance = grab.distance * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions, interactivity = options.interactivity;\n        if (!interactivity.modes.grab ||\n            !interactivity.events.onHover.enable ||\n            container.interactivity.status !== mouseMoveEvent) {\n            return;\n        }\n        const mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const distance = container.retina.grabModeDistance;\n        if (!distance || distance < minDistance) {\n            return;\n        }\n        const query = container.particles.quadTree.queryCircle(mousePos, distance, p => this.isEnabled(p));\n        for (const particle of query) {\n            const pos = particle.getPosition(), pointDistance = getDistance(pos, mousePos);\n            if (pointDistance > distance) {\n                continue;\n            }\n            const grabLineOptions = interactivity.modes.grab.links, lineOpacity = grabLineOptions.opacity, opacityLine = lineOpacity - (pointDistance * lineOpacity) / distance;\n            if (opacityLine <= minOpacity) {\n                continue;\n            }\n            const optColor = grabLineOptions.color ?? particle.options.links?.color;\n            if (!container.particles.grabLineColor && optColor) {\n                const linksOptions = interactivity.modes.grab.links;\n                container.particles.grabLineColor = getLinkRandomColor(this._engine, optColor, linksOptions.blink, linksOptions.consent);\n            }\n            const colorLine = getLinkColor(particle, undefined, container.particles.grabLineColor);\n            if (!colorLine) {\n                continue;\n            }\n            drawGrab(container, particle, colorLine, opacityLine, mousePos);\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(grabMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.grab) {\n            options.grab = new Grab();\n        }\n        for (const source of sources) {\n            options.grab.load(source?.grab);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Grabber } from \"./Grabber.js\";\nexport async function loadExternalGrabInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalGrab\", container => {\n        return Promise.resolve(new Grabber(container, engine));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Grab.js\";\nexport * from \"./Options/Classes/GrabLinks.js\";\nexport * from \"./Options/Interfaces/IGrab.js\";\nexport * from \"./Options/Interfaces/IGrabLinks.js\";\n", "import { ExternalInteractorBase } from \"@tsparticles/engine\";\nconst pauseMode = \"pause\";\nexport class Pauser extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this.handleClickMode = (mode) => {\n            if (mode !== pauseMode) {\n                return;\n            }\n            const container = this.container;\n            if (container.animationStatus) {\n                container.pause();\n            }\n            else {\n                container.play();\n            }\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact() {\n    }\n    isEnabled() {\n        return true;\n    }\n    reset() {\n    }\n}\n", "import { Pauser } from \"./Pauser.js\";\nexport async function loadExternalPauseInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalPause\", container => {\n        return Promise.resolve(new Pauser(container));\n    }, refresh);\n}\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class Push {\n    constructor() {\n        this.default = true;\n        this.groups = [];\n        this.quantity = 4;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.default !== undefined) {\n            this.default = data.default;\n        }\n        if (data.groups !== undefined) {\n            this.groups = data.groups.map(t => t);\n        }\n        if (!this.groups.length) {\n            this.default = true;\n        }\n        const quantity = data.quantity;\n        if (quantity !== undefined) {\n            this.quantity = setRangeValue(quantity);\n        }\n    }\n}\n", "import { ExternalInteractorBase, getRangeValue, itemFromArray, } from \"@tsparticles/engine\";\nimport { Push } from \"./Options/Classes/Push.js\";\nconst pushMode = \"push\", minQuantity = 0;\nexport class Pusher extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this.handleClickMode = (mode) => {\n            if (mode !== pushMode) {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, pushOptions = options.interactivity.modes.push;\n            if (!pushOptions) {\n                return;\n            }\n            const quantity = getRangeValue(pushOptions.quantity);\n            if (quantity <= minQuantity) {\n                return;\n            }\n            const group = itemFromArray([undefined, ...pushOptions.groups]), groupOptions = group !== undefined ? container.actualOptions.particles.groups[group] : undefined;\n            void container.particles.push(quantity, container.interactivity.mouse, groupOptions, group);\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact() {\n    }\n    isEnabled() {\n        return true;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.push) {\n            options.push = new Push();\n        }\n        for (const source of sources) {\n            options.push.load(source?.push);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Pusher } from \"./Pusher.js\";\nexport async function loadExternalPushInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalPush\", container => {\n        return Promise.resolve(new Pusher(container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Push.js\";\nexport * from \"./Options/Interfaces/IPush.js\";\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class Remove {\n    constructor() {\n        this.quantity = 2;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        const quantity = data.quantity;\n        if (quantity !== undefined) {\n            this.quantity = setRangeValue(quantity);\n        }\n    }\n}\n", "import { ExternalInteractorBase, getRangeValue, } from \"@tsparticles/engine\";\nimport { Remove } from \"./Options/Classes/Remove.js\";\nconst removeMode = \"remove\";\nexport class Remover extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n        this.handleClickMode = (mode) => {\n            const container = this.container, options = container.actualOptions;\n            if (!options.interactivity.modes.remove || mode !== removeMode) {\n                return;\n            }\n            const removeNb = getRangeValue(options.interactivity.modes.remove.quantity);\n            container.particles.removeQuantity(removeNb);\n        };\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact() {\n    }\n    isEnabled() {\n        return true;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.remove) {\n            options.remove = new Remove();\n        }\n        for (const source of sources) {\n            options.remove.load(source?.remove);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Remover } from \"./Remover.js\";\nexport async function loadExternalRemoveInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalRemove\", container => {\n        return Promise.resolve(new Remover(container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Remove.js\";\nexport * from \"./Options/Interfaces/IRemove.js\";\n", "import { EasingType, isNull } from \"@tsparticles/engine\";\nexport class RepulseBase {\n    constructor() {\n        this.distance = 200;\n        this.duration = 0.4;\n        this.factor = 100;\n        this.speed = 1;\n        this.maxSpeed = 50;\n        this.easing = EasingType.easeOutQuad;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.duration !== undefined) {\n            this.duration = data.duration;\n        }\n        if (data.easing !== undefined) {\n            this.easing = data.easing;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.speed !== undefined) {\n            this.speed = data.speed;\n        }\n        if (data.maxSpeed !== undefined) {\n            this.maxSpeed = data.maxSpeed;\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nimport { RepulseBase } from \"./RepulseBase.js\";\nexport class RepulseDiv extends RepulseBase {\n    constructor() {\n        super();\n        this.selectors = [];\n    }\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        if (data.selectors !== undefined) {\n            this.selectors = data.selectors;\n        }\n    }\n}\n", "import { executeOnSingleOrMultiple, isNull, } from \"@tsparticles/engine\";\nimport { RepulseBase } from \"./RepulseBase.js\";\nimport { RepulseDiv } from \"./RepulseDiv.js\";\nexport class Repulse extends RepulseBase {\n    load(data) {\n        super.load(data);\n        if (isNull(data)) {\n            return;\n        }\n        this.divs = executeOnSingleOrMultiple(data.divs, div => {\n            const tmp = new RepulseDiv();\n            tmp.load(div);\n            return tmp;\n        });\n    }\n}\n", "import { Circle, DivType, ExternalInteractorBase, Rectangle, Vector, clamp, divMode, divModeExecute, getDistances, isDivModeEnabled, isInArray, millisecondsToSeconds, mouseMoveEvent, } from \"@tsparticles/engine\";\nimport { Repulse } from \"./Options/Classes/Repulse.js\";\nconst repulseMode = \"repulse\", minDistance = 0, repulseRadiusFactor = 6, repulseRadiusPower = 3, squarePower = 2, minRadius = 0, minSpeed = 0, easingOffset = 1, half = 0.5;\nexport class Repulser extends ExternalInteractorBase {\n    constructor(engine, container) {\n        super(container);\n        this._clickRepulse = () => {\n            const container = this.container, repulseOptions = container.actualOptions.interactivity.modes.repulse;\n            if (!repulseOptions) {\n                return;\n            }\n            const repulse = container.repulse ?? { particles: [] };\n            if (!repulse.finish) {\n                if (!repulse.count) {\n                    repulse.count = 0;\n                }\n                repulse.count++;\n                if (repulse.count === container.particles.count) {\n                    repulse.finish = true;\n                }\n            }\n            if (repulse.clicking) {\n                const repulseDistance = container.retina.repulseModeDistance;\n                if (!repulseDistance || repulseDistance < minDistance) {\n                    return;\n                }\n                const repulseRadius = Math.pow(repulseDistance / repulseRadiusFactor, repulseRadiusPower), mouseClickPos = container.interactivity.mouse.clickPosition;\n                if (mouseClickPos === undefined) {\n                    return;\n                }\n                const range = new Circle(mouseClickPos.x, mouseClickPos.y, repulseRadius), query = container.particles.quadTree.query(range, p => this.isEnabled(p));\n                for (const particle of query) {\n                    const { dx, dy, distance } = getDistances(mouseClickPos, particle.position), d = distance ** squarePower, velocity = repulseOptions.speed, force = (-repulseRadius * velocity) / d;\n                    if (d <= repulseRadius) {\n                        repulse.particles.push(particle);\n                        const vect = Vector.create(dx, dy);\n                        vect.length = force;\n                        particle.velocity.setTo(vect);\n                    }\n                }\n            }\n            else if (repulse.clicking === false) {\n                for (const particle of repulse.particles) {\n                    particle.velocity.setTo(particle.initialVelocity);\n                }\n                repulse.particles = [];\n            }\n        };\n        this._hoverRepulse = () => {\n            const container = this.container, mousePos = container.interactivity.mouse.position, repulseRadius = container.retina.repulseModeDistance;\n            if (!repulseRadius || repulseRadius < minRadius || !mousePos) {\n                return;\n            }\n            this._processRepulse(mousePos, repulseRadius, new Circle(mousePos.x, mousePos.y, repulseRadius));\n        };\n        this._processRepulse = (position, repulseRadius, area, divRepulse) => {\n            const container = this.container, query = container.particles.quadTree.query(area, p => this.isEnabled(p)), repulseOptions = container.actualOptions.interactivity.modes.repulse;\n            if (!repulseOptions) {\n                return;\n            }\n            const { easing, speed, factor, maxSpeed } = repulseOptions, easingFunc = this._engine.getEasing(easing), velocity = (divRepulse?.speed ?? speed) * factor;\n            for (const particle of query) {\n                const { dx, dy, distance } = getDistances(particle.position, position), repulseFactor = clamp(easingFunc(easingOffset - distance / repulseRadius) * velocity, minSpeed, maxSpeed), normVec = Vector.create(!distance ? velocity : (dx / distance) * repulseFactor, !distance ? velocity : (dy / distance) * repulseFactor);\n                particle.position.addTo(normVec);\n            }\n        };\n        this._singleSelectorRepulse = (selector, div) => {\n            const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;\n            if (!repulse) {\n                return;\n            }\n            const query = document.querySelectorAll(selector);\n            if (!query.length) {\n                return;\n            }\n            query.forEach(item => {\n                const elem = item, pxRatio = container.retina.pixelRatio, pos = {\n                    x: (elem.offsetLeft + elem.offsetWidth * half) * pxRatio,\n                    y: (elem.offsetTop + elem.offsetHeight * half) * pxRatio,\n                }, repulseRadius = elem.offsetWidth * half * pxRatio, area = div.type === DivType.circle\n                    ? new Circle(pos.x, pos.y, repulseRadius)\n                    : new Rectangle(elem.offsetLeft * pxRatio, elem.offsetTop * pxRatio, elem.offsetWidth * pxRatio, elem.offsetHeight * pxRatio), divs = repulse.divs, divRepulse = divMode(divs, elem);\n                this._processRepulse(pos, repulseRadius, area, divRepulse);\n            });\n        };\n        this._engine = engine;\n        if (!container.repulse) {\n            container.repulse = { particles: [] };\n        }\n        this.handleClickMode = (mode) => {\n            const options = this.container.actualOptions, repulseOpts = options.interactivity.modes.repulse;\n            if (!repulseOpts || mode !== repulseMode) {\n                return;\n            }\n            if (!container.repulse) {\n                container.repulse = { particles: [] };\n            }\n            const repulse = container.repulse;\n            repulse.clicking = true;\n            repulse.count = 0;\n            for (const particle of container.repulse.particles) {\n                if (!this.isEnabled(particle)) {\n                    continue;\n                }\n                particle.velocity.setTo(particle.initialVelocity);\n            }\n            repulse.particles = [];\n            repulse.finish = false;\n            setTimeout(() => {\n                if (container.destroyed) {\n                    return;\n                }\n                repulse.clicking = false;\n            }, repulseOpts.duration * millisecondsToSeconds);\n        };\n    }\n    clear() {\n    }\n    init() {\n        const container = this.container, repulse = container.actualOptions.interactivity.modes.repulse;\n        if (!repulse) {\n            return;\n        }\n        container.retina.repulseModeDistance = repulse.distance * container.retina.pixelRatio;\n    }\n    interact() {\n        const container = this.container, options = container.actualOptions, mouseMoveStatus = container.interactivity.status === mouseMoveEvent, events = options.interactivity.events, hover = events.onHover, hoverEnabled = hover.enable, hoverMode = hover.mode, click = events.onClick, clickEnabled = click.enable, clickMode = click.mode, divs = events.onDiv;\n        if (mouseMoveStatus && hoverEnabled && isInArray(repulseMode, hoverMode)) {\n            this._hoverRepulse();\n        }\n        else if (clickEnabled && isInArray(repulseMode, clickMode)) {\n            this._clickRepulse();\n        }\n        else {\n            divModeExecute(repulseMode, divs, (selector, div) => this._singleSelectorRepulse(selector, div));\n        }\n    }\n    isEnabled(particle) {\n        const container = this.container, options = container.actualOptions, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? options.interactivity).events, divs = events.onDiv, hover = events.onHover, click = events.onClick, divRepulse = isDivModeEnabled(repulseMode, divs);\n        if (!(divRepulse || (hover.enable && !!mouse.position) || (click.enable && mouse.clickPosition))) {\n            return false;\n        }\n        const hoverMode = hover.mode, clickMode = click.mode;\n        return isInArray(repulseMode, hoverMode) || isInArray(repulseMode, clickMode) || divRepulse;\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.repulse) {\n            options.repulse = new Repulse();\n        }\n        for (const source of sources) {\n            options.repulse.load(source?.repulse);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Repulser } from \"./Repulser.js\";\nexport async function loadExternalRepulseInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalRepulse\", container => {\n        return Promise.resolve(new Repulser(engine, container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/RepulseBase.js\";\nexport * from \"./Options/Classes/RepulseDiv.js\";\nexport * from \"./Options/Classes/Repulse.js\";\nexport * from \"./Options/Interfaces/IRepulseBase.js\";\nexport * from \"./Options/Interfaces/IRepulseDiv.js\";\nexport * from \"./Options/Interfaces/IRepulse.js\";\n", "import { isNull } from \"@tsparticles/engine\";\nexport class Slow {\n    constructor() {\n        this.factor = 3;\n        this.radius = 200;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.factor !== undefined) {\n            this.factor = data.factor;\n        }\n        if (data.radius !== undefined) {\n            this.radius = data.radius;\n        }\n    }\n}\n", "import { ExternalInteractorBase, getDistance, isInArray, } from \"@tsparticles/engine\";\nimport { Slow } from \"./Options/Classes/Slow.js\";\nconst slowMode = \"slow\", minRadius = 0;\nexport class Slower extends ExternalInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear(particle, delta, force) {\n        if (particle.slow.inRange && !force) {\n            return;\n        }\n        particle.slow.factor = 1;\n    }\n    init() {\n        const container = this.container, slow = container.actualOptions.interactivity.modes.slow;\n        if (!slow) {\n            return;\n        }\n        container.retina.slowModeRadius = slow.radius * container.retina.pixelRatio;\n    }\n    interact() {\n    }\n    isEnabled(particle) {\n        const container = this.container, mouse = container.interactivity.mouse, events = (particle?.interactivity ?? container.actualOptions.interactivity).events;\n        return events.onHover.enable && !!mouse.position && isInArray(slowMode, events.onHover.mode);\n    }\n    loadModeOptions(options, ...sources) {\n        if (!options.slow) {\n            options.slow = new Slow();\n        }\n        for (const source of sources) {\n            options.slow.load(source?.slow);\n        }\n    }\n    reset(particle) {\n        particle.slow.inRange = false;\n        const container = this.container, options = container.actualOptions, mousePos = container.interactivity.mouse.position, radius = container.retina.slowModeRadius, slowOptions = options.interactivity.modes.slow;\n        if (!slowOptions || !radius || radius < minRadius || !mousePos) {\n            return;\n        }\n        const particlePos = particle.getPosition(), dist = getDistance(mousePos, particlePos), proximityFactor = dist / radius, slowFactor = slowOptions.factor, { slow } = particle;\n        if (dist > radius) {\n            return;\n        }\n        slow.inRange = true;\n        slow.factor = proximityFactor / slowFactor;\n    }\n}\n", "import { Slower } from \"./Slower.js\";\nexport async function loadExternalSlowInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"externalSlow\", container => {\n        return Promise.resolve(new Slower(container));\n    }, refresh);\n}\nexport * from \"./Options/Classes/Slow.js\";\nexport * from \"./Options/Interfaces/ISlow.js\";\n", "import { errorPrefix, getLogger, getStyleFromHsl } from \"@tsparticles/engine\";\nconst stringStart = 0, defaultOpacity = 1;\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    const colorStyle = getStyleFromHsl(color, opacity);\n    if (svgData.includes(\"fill\")) {\n        return svgData.replace(currentColorRegex, () => colorStyle);\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(stringStart, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nexport async function loadImage(image) {\n    return new Promise((resolve) => {\n        image.loading = true;\n        const img = new Image();\n        image.element = img;\n        img.addEventListener(\"load\", () => {\n            image.loading = false;\n            resolve();\n        });\n        img.addEventListener(\"error\", () => {\n            image.element = undefined;\n            image.error = true;\n            image.loading = false;\n            getLogger().error(`${errorPrefix} loading image: ${image.source}`);\n            resolve();\n        });\n        img.src = image.source;\n    });\n}\nexport async function downloadSvgImage(image) {\n    if (image.type !== \"svg\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    const response = await fetch(image.source);\n    if (!response.ok) {\n        getLogger().error(`${errorPrefix} Image not found`);\n        image.error = true;\n    }\n    else {\n        image.svgData = await response.text();\n    }\n    image.loading = false;\n}\nexport function replaceImageColor(image, imageData, color, particle) {\n    const svgColoredData = replaceColorSvg(image, color, particle.opacity?.value ?? defaultOpacity), imageRes = {\n        color,\n        gif: imageData.gif,\n        data: {\n            ...image,\n            svgData: svgColoredData,\n        },\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: imageData.replaceColor,\n        source: imageData.src,\n    };\n    return new Promise(resolve => {\n        const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();\n        img.addEventListener(\"load\", () => {\n            imageRes.loaded = true;\n            imageRes.element = img;\n            resolve(imageRes);\n            domUrl.revokeObjectURL(url);\n        });\n        const errorHandler = async () => {\n            domUrl.revokeObjectURL(url);\n            const img2 = {\n                ...image,\n                error: false,\n                loading: true,\n            };\n            await loadImage(img2);\n            imageRes.loaded = true;\n            imageRes.element = img2.element;\n            resolve(imageRes);\n        };\n        img.addEventListener(\"error\", () => void errorHandler());\n        img.src = url;\n    });\n}\n", "export const InterlaceOffsets = [0, 4, 2, 1];\nexport const InterlaceSteps = [8, 8, 4, 2];\n", "export class ByteStream {\n    constructor(bytes) {\n        this.pos = 0;\n        this.data = new Uint8ClampedArray(bytes);\n    }\n    getString(count) {\n        const slice = this.data.slice(this.pos, this.pos + count);\n        this.pos += slice.length;\n        return slice.reduce((acc, curr) => acc + String.fromCharCode(curr), \"\");\n    }\n    nextByte() {\n        return this.data[this.pos++];\n    }\n    nextTwoBytes() {\n        const increment = 2, previous = 1, shift = 8;\n        this.pos += increment;\n        return this.data[this.pos - increment] + (this.data[this.pos - previous] << shift);\n    }\n    readSubBlocks() {\n        let blockString = \"\", size = 0;\n        const minCount = 0, emptySize = 0;\n        do {\n            size = this.data[this.pos++];\n            for (let count = size; --count >= minCount; blockString += String.fromCharCode(this.data[this.pos++])) {\n            }\n        } while (size !== emptySize);\n        return blockString;\n    }\n    readSubBlocksBin() {\n        let size = this.data[this.pos], len = 0;\n        const emptySize = 0, increment = 1;\n        for (let offset = 0; size !== emptySize; offset += size + increment, size = this.data[this.pos + offset]) {\n            len += size;\n        }\n        const blockData = new Uint8Array(len);\n        size = this.data[this.pos++];\n        for (let i = 0; size !== emptySize; size = this.data[this.pos++]) {\n            for (let count = size; --count >= emptySize; blockData[i++] = this.data[this.pos++]) {\n            }\n        }\n        return blockData;\n    }\n    skipSubBlocks() {\n        for (const increment = 1, noData = 0; this.data[this.pos] !== noData; this.pos += this.data[this.pos] + increment) {\n        }\n        this.pos++;\n    }\n}\n", "export var DisposalMethod;\n(function (DisposalMethod) {\n    DisposalMethod[DisposalMethod[\"Replace\"] = 0] = \"Replace\";\n    DisposalMethod[DisposalMethod[\"Combine\"] = 1] = \"Combine\";\n    DisposalMethod[DisposalMethod[\"RestoreBackground\"] = 2] = \"RestoreBackground\";\n    DisposalMethod[DisposalMethod[\"RestorePrevious\"] = 3] = \"RestorePrevious\";\n    DisposalMethod[DisposalMethod[\"UndefinedA\"] = 4] = \"UndefinedA\";\n    DisposalMethod[DisposalMethod[\"UndefinedB\"] = 5] = \"UndefinedB\";\n    DisposalMethod[DisposalMethod[\"UndefinedC\"] = 6] = \"UndefinedC\";\n    DisposalMethod[DisposalMethod[\"UndefinedD\"] = 7] = \"UndefinedD\";\n})(DisposalMethod || (DisposalMethod = {}));\n", "export var GIFDataHeaders;\n(function (GIFDataHeaders) {\n    GIFDataHeaders[GIFDataHeaders[\"Extension\"] = 33] = \"Extension\";\n    GIFDataHeaders[GIFDataHeaders[\"ApplicationExtension\"] = 255] = \"ApplicationExtension\";\n    GIFDataHeaders[GIFDataHeaders[\"GraphicsControlExtension\"] = 249] = \"GraphicsControlExtension\";\n    GIFDataHeaders[GIFDataHeaders[\"PlainTextExtension\"] = 1] = \"PlainTextExtension\";\n    GIFDataHeaders[GIFDataHeaders[\"CommentExtension\"] = 254] = \"CommentExtension\";\n    GIFDataHeaders[GIFDataHeaders[\"Image\"] = 44] = \"Image\";\n    GIFDataHeaders[GIFDataHeaders[\"EndOfFile\"] = 59] = \"EndOfFile\";\n})(GIFDataHeaders || (GIFDataHeaders = {}));\n", "import { loadImage } from \"../Utils.js\";\nimport { InterlaceOffsets, InterlaceSteps } from \"./Constants.js\";\nimport { ByteStream } from \"./ByteStream.js\";\nimport { DisposalMethod } from \"./Enums/DisposalMethod.js\";\nimport { GIFDataHeaders } from \"./Types/GIFDataHeaders.js\";\nconst origin = {\n    x: 0,\n    y: 0,\n}, defaultFrame = 0, half = 0.5, initialTime = 0, firstIndex = 0, defaultLoopCount = 0;\nfunction parseColorTable(byteStream, count) {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n        colors.push({\n            r: byteStream.data[byteStream.pos],\n            g: byteStream.data[byteStream.pos + 1],\n            b: byteStream.data[byteStream.pos + 2],\n        });\n        byteStream.pos += 3;\n    }\n    return colors;\n}\nfunction parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex) {\n    switch (byteStream.nextByte()) {\n        case GIFDataHeaders.GraphicsControlExtension: {\n            const frame = gif.frames[getFrameIndex(false)];\n            byteStream.pos++;\n            const packedByte = byteStream.nextByte();\n            frame.GCreserved = (packedByte & 0xe0) >>> 5;\n            frame.disposalMethod = (packedByte & 0x1c) >>> 2;\n            frame.userInputDelayFlag = (packedByte & 2) === 2;\n            const transparencyFlag = (packedByte & 1) === 1;\n            frame.delayTime = byteStream.nextTwoBytes() * 0xa;\n            const transparencyIndex = byteStream.nextByte();\n            if (transparencyFlag) {\n                getTransparencyIndex(transparencyIndex);\n            }\n            byteStream.pos++;\n            break;\n        }\n        case GIFDataHeaders.ApplicationExtension: {\n            byteStream.pos++;\n            const applicationExtension = {\n                identifier: byteStream.getString(8),\n                authenticationCode: byteStream.getString(3),\n                data: byteStream.readSubBlocksBin(),\n            };\n            gif.applicationExtensions.push(applicationExtension);\n            break;\n        }\n        case GIFDataHeaders.CommentExtension: {\n            gif.comments.push([getFrameIndex(false), byteStream.readSubBlocks()]);\n            break;\n        }\n        case GIFDataHeaders.PlainTextExtension: {\n            if (gif.globalColorTable.length === 0) {\n                throw new EvalError(\"plain text extension without global color table\");\n            }\n            byteStream.pos++;\n            gif.frames[getFrameIndex(false)].plainTextData = {\n                left: byteStream.nextTwoBytes(),\n                top: byteStream.nextTwoBytes(),\n                width: byteStream.nextTwoBytes(),\n                height: byteStream.nextTwoBytes(),\n                charSize: {\n                    width: byteStream.nextTwoBytes(),\n                    height: byteStream.nextTwoBytes(),\n                },\n                foregroundColor: byteStream.nextByte(),\n                backgroundColor: byteStream.nextByte(),\n                text: byteStream.readSubBlocks(),\n            };\n            break;\n        }\n        default:\n            byteStream.skipSubBlocks();\n            break;\n    }\n}\nasync function parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    const frame = gif.frames[getFrameIndex(true)];\n    frame.left = byteStream.nextTwoBytes();\n    frame.top = byteStream.nextTwoBytes();\n    frame.width = byteStream.nextTwoBytes();\n    frame.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), localColorTableFlag = (packedByte & 0x80) === 0x80, interlacedFlag = (packedByte & 0x40) === 0x40;\n    frame.sortFlag = (packedByte & 0x20) === 0x20;\n    frame.reserved = (packedByte & 0x18) >>> 3;\n    const localColorCount = 1 << ((packedByte & 7) + 1);\n    if (localColorTableFlag) {\n        frame.localColorTable = parseColorTable(byteStream, localColorCount);\n    }\n    const getColor = (index) => {\n        const { r, g, b } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];\n        if (index !== getTransparencyIndex(null)) {\n            return { r, g, b, a: 255 };\n        }\n        return { r, g, b, a: avgAlpha ? ~~((r + g + b) / 3) : 0 };\n    };\n    const image = (() => {\n        try {\n            return new ImageData(frame.width, frame.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (image == null) {\n        throw new EvalError(\"GIF frame size is to large\");\n    }\n    const minCodeSize = byteStream.nextByte(), imageData = byteStream.readSubBlocksBin(), clearCode = 1 << minCodeSize;\n    const readBits = (pos, len) => {\n        const bytePos = pos >>> 3, bitPos = pos & 7;\n        return (((imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16)) &\n            (((1 << len) - 1) << bitPos)) >>>\n            bitPos);\n    };\n    if (interlacedFlag) {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pass = 0; pass < 4; pass++) {\n            if (InterlaceOffsets[pass] < frame.height) {\n                let pixelPos = 0, lineIndex = 0, exit = false;\n                while (!exit) {\n                    const last = code;\n                    code = readBits(pos, size);\n                    pos += size + 1;\n                    if (code === clearCode) {\n                        size = minCodeSize + 1;\n                        dic.length = clearCode + 2;\n                        for (let i = 0; i < dic.length; i++) {\n                            dic[i] = i < clearCode ? [i] : [];\n                        }\n                    }\n                    else {\n                        if (code >= dic.length) {\n                            dic.push(dic[last].concat(dic[last][0]));\n                        }\n                        else if (last !== clearCode) {\n                            dic.push(dic[last].concat(dic[code][0]));\n                        }\n                        for (const item of dic[code]) {\n                            const { r, g, b, a } = getColor(item);\n                            image.data.set([r, g, b, a], InterlaceOffsets[pass] * frame.width +\n                                InterlaceSteps[pass] * lineIndex +\n                                (pixelPos % (frame.width * 4)));\n                            pixelPos += 4;\n                        }\n                        if (dic.length === 1 << size && size < 0xc) {\n                            size++;\n                        }\n                    }\n                    if (pixelPos === frame.width * 4 * (lineIndex + 1)) {\n                        lineIndex++;\n                        if (InterlaceOffsets[pass] + InterlaceSteps[pass] * lineIndex >= frame.height) {\n                            exit = true;\n                        }\n                    }\n                }\n            }\n            progressCallback?.(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n    }\n    else {\n        let code = 0, size = minCodeSize + 1, pos = 0, pixelPos = -4, exit = false;\n        const dic = [[0]];\n        while (!exit) {\n            const last = code;\n            code = readBits(pos, size);\n            pos += size;\n            if (code === clearCode) {\n                size = minCodeSize + 1;\n                dic.length = clearCode + 2;\n                for (let i = 0; i < dic.length; i++) {\n                    dic[i] = i < clearCode ? [i] : [];\n                }\n            }\n            else {\n                if (code === clearCode + 1) {\n                    exit = true;\n                    break;\n                }\n                if (code >= dic.length) {\n                    dic.push(dic[last].concat(dic[last][0]));\n                }\n                else if (last !== clearCode) {\n                    dic.push(dic[last].concat(dic[code][0]));\n                }\n                for (const item of dic[code]) {\n                    const { r, g, b, a } = getColor(item);\n                    image.data.set([r, g, b, a], (pixelPos += 4));\n                }\n                if (dic.length >= 1 << size && size < 0xc) {\n                    size++;\n                }\n            }\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n        progressCallback?.((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n    }\n}\nasync function parseBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    switch (byteStream.nextByte()) {\n        case GIFDataHeaders.EndOfFile:\n            return true;\n        case GIFDataHeaders.Image:\n            await parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);\n            break;\n        case GIFDataHeaders.Extension:\n            parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);\n            break;\n        default:\n            throw new EvalError(\"undefined block found\");\n    }\n    return false;\n}\nexport function getGIFLoopAmount(gif) {\n    for (const extension of gif.applicationExtensions) {\n        if (extension.identifier + extension.authenticationCode !== \"NETSCAPE2.0\") {\n            continue;\n        }\n        return extension.data[1] + (extension.data[2] << 8);\n    }\n    return NaN;\n}\nexport async function decodeGIF(gifURL, progressCallback, avgAlpha) {\n    if (!avgAlpha)\n        avgAlpha = false;\n    const res = await fetch(gifURL);\n    if (!res.ok && res.status === 404) {\n        throw new EvalError(\"file not found\");\n    }\n    const buffer = await res.arrayBuffer();\n    const gif = {\n        width: 0,\n        height: 0,\n        totalTime: 0,\n        colorRes: 0,\n        pixelAspectRatio: 0,\n        frames: [],\n        sortFlag: false,\n        globalColorTable: [],\n        backgroundImage: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n        comments: [],\n        applicationExtensions: [],\n    }, byteStream = new ByteStream(new Uint8ClampedArray(buffer));\n    if (byteStream.getString(6) !== \"GIF89a\") {\n        throw new Error(\"not a supported GIF file\");\n    }\n    gif.width = byteStream.nextTwoBytes();\n    gif.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), globalColorTableFlag = (packedByte & 0x80) === 0x80;\n    gif.colorRes = (packedByte & 0x70) >>> 4;\n    gif.sortFlag = (packedByte & 8) === 8;\n    const globalColorCount = 1 << ((packedByte & 7) + 1), backgroundColorIndex = byteStream.nextByte();\n    gif.pixelAspectRatio = byteStream.nextByte();\n    if (gif.pixelAspectRatio !== 0) {\n        gif.pixelAspectRatio = (gif.pixelAspectRatio + 0xf) / 0x40;\n    }\n    if (globalColorTableFlag) {\n        gif.globalColorTable = parseColorTable(byteStream, globalColorCount);\n    }\n    const backgroundImage = (() => {\n        try {\n            return new ImageData(gif.width, gif.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (backgroundImage == null) {\n        throw new Error(\"GIF frame size is to large\");\n    }\n    const { r, g, b } = gif.globalColorTable[backgroundColorIndex];\n    backgroundImage.data.set(globalColorTableFlag ? [r, g, b, 255] : [0, 0, 0, 0]);\n    for (let i = 4; i < backgroundImage.data.length; i *= 2) {\n        backgroundImage.data.copyWithin(i, 0, i);\n    }\n    gif.backgroundImage = backgroundImage;\n    let frameIndex = -1, incrementFrameIndex = true, transparencyIndex = -1;\n    const getframeIndex = (increment) => {\n        if (increment) {\n            incrementFrameIndex = true;\n        }\n        return frameIndex;\n    };\n    const getTransparencyIndex = (newValue) => {\n        if (newValue != null) {\n            transparencyIndex = newValue;\n        }\n        return transparencyIndex;\n    };\n    try {\n        do {\n            if (incrementFrameIndex) {\n                gif.frames.push({\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                    disposalMethod: DisposalMethod.Replace,\n                    image: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n                    plainTextData: null,\n                    userInputDelayFlag: false,\n                    delayTime: 0,\n                    sortFlag: false,\n                    localColorTable: [],\n                    reserved: 0,\n                    GCreserved: 0,\n                });\n                frameIndex++;\n                transparencyIndex = -1;\n                incrementFrameIndex = false;\n            }\n        } while (!(await parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback)));\n        gif.frames.length--;\n        for (const frame of gif.frames) {\n            if (frame.userInputDelayFlag && frame.delayTime === 0) {\n                gif.totalTime = Infinity;\n                break;\n            }\n            gif.totalTime += frame.delayTime;\n        }\n        return gif;\n    }\n    catch (error) {\n        if (error instanceof EvalError) {\n            throw new Error(`error while parsing frame ${frameIndex} \"${error.message}\"`);\n        }\n        throw error;\n    }\n}\nexport function drawGif(data) {\n    const { context, radius, particle, delta } = data, image = particle.image;\n    if (!image?.gifData || !image.gif) {\n        return;\n    }\n    const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height), offscreenContext = offscreenCanvas.getContext(\"2d\");\n    if (!offscreenContext) {\n        throw new Error(\"could not create offscreen canvas context\");\n    }\n    offscreenContext.imageSmoothingQuality = \"low\";\n    offscreenContext.imageSmoothingEnabled = false;\n    offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n    if (particle.gifLoopCount === undefined) {\n        particle.gifLoopCount = image.gifLoopCount ?? defaultLoopCount;\n    }\n    let frameIndex = particle.gifFrame ?? defaultFrame;\n    const pos = { x: -image.gifData.width * half, y: -image.gifData.height * half }, frame = image.gifData.frames[frameIndex];\n    if (particle.gifTime === undefined) {\n        particle.gifTime = initialTime;\n    }\n    if (!frame.bitmap) {\n        return;\n    }\n    context.scale(radius / image.gifData.width, radius / image.gifData.height);\n    switch (frame.disposalMethod) {\n        case DisposalMethod.UndefinedA:\n        case DisposalMethod.UndefinedB:\n        case DisposalMethod.UndefinedC:\n        case DisposalMethod.UndefinedD:\n        case DisposalMethod.Replace:\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n            break;\n        case DisposalMethod.Combine:\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            break;\n        case DisposalMethod.RestoreBackground:\n            offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n            context.drawImage(offscreenCanvas, pos.x, pos.y);\n            offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n            if (!image.gifData.globalColorTable.length) {\n                offscreenContext.putImageData(image.gifData.frames[firstIndex].image, pos.x + frame.left, pos.y + frame.top);\n            }\n            else {\n                offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);\n            }\n            break;\n        case DisposalMethod.RestorePrevious:\n            {\n                const previousImageData = offscreenContext.getImageData(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n                offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                context.drawImage(offscreenCanvas, pos.x, pos.y);\n                offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n                offscreenContext.putImageData(previousImageData, origin.x, origin.y);\n            }\n            break;\n    }\n    particle.gifTime += delta.value;\n    if (particle.gifTime > frame.delayTime) {\n        particle.gifTime -= frame.delayTime;\n        if (++frameIndex >= image.gifData.frames.length) {\n            if (--particle.gifLoopCount <= defaultLoopCount) {\n                return;\n            }\n            frameIndex = firstIndex;\n            offscreenContext.clearRect(origin.x, origin.y, offscreenCanvas.width, offscreenCanvas.height);\n        }\n        particle.gifFrame = frameIndex;\n    }\n    context.scale(image.gifData.width / radius, image.gifData.height / radius);\n}\nexport async function loadGifImage(image) {\n    if (image.type !== \"gif\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    try {\n        image.gifData = await decodeGIF(image.source);\n        image.gifLoopCount = getGIFLoopAmount(image.gifData) ?? defaultLoopCount;\n        if (!image.gifLoopCount) {\n            image.gifLoopCount = Infinity;\n        }\n    }\n    catch {\n        image.error = true;\n    }\n    image.loading = false;\n}\n", "import { errorPrefix } from \"@tsparticles/engine\";\nimport { replaceImageColor } from \"./Utils.js\";\nimport { drawGif } from \"./GifUtils/Utils.js\";\nconst double = 2, defaultAlpha = 1, sides = 12, defaultRatio = 1;\nexport class ImageDrawer {\n    constructor(engine) {\n        this.validTypes = [\"image\", \"images\"];\n        this.loadImageShape = async (imageShape) => {\n            if (!this._engine.loadImage) {\n                throw new Error(`${errorPrefix} image shape not initialized`);\n            }\n            await this._engine.loadImage({\n                gif: imageShape.gif,\n                name: imageShape.name,\n                replaceColor: imageShape.replaceColor ?? false,\n                src: imageShape.src,\n            });\n        };\n        this._engine = engine;\n    }\n    addImage(image) {\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        this._engine.images.push(image);\n    }\n    draw(data) {\n        const { context, radius, particle, opacity } = data, image = particle.image, element = image?.element;\n        if (!image) {\n            return;\n        }\n        context.globalAlpha = opacity;\n        if (image.gif && image.gifData) {\n            drawGif(data);\n        }\n        else if (element) {\n            const ratio = image.ratio, pos = {\n                x: -radius,\n                y: -radius,\n            }, diameter = radius * double;\n            context.drawImage(element, pos.x, pos.y, diameter, diameter / ratio);\n        }\n        context.globalAlpha = defaultAlpha;\n    }\n    getSidesCount() {\n        return sides;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!options.preload || !this._engine.loadImage) {\n            return;\n        }\n        for (const imageData of options.preload) {\n            await this._engine.loadImage(imageData);\n        }\n    }\n    loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const imageData = particle.shapeData;\n        if (!imageData) {\n            return;\n        }\n        const image = this._engine.images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            void this.loadImageShape(imageData).then(() => {\n                this.loadShape(particle);\n            });\n        }\n    }\n    particleInit(container, particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const images = this._engine.images, imageData = particle.shapeData;\n        if (!imageData) {\n            return;\n        }\n        const color = particle.getFillColor(), image = images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        const replaceColor = imageData.replaceColor ?? image.replaceColor;\n        if (image.loading) {\n            setTimeout(() => {\n                this.particleInit(container, particle);\n            });\n            return;\n        }\n        void (async () => {\n            let imageRes;\n            if (image.svgData && color) {\n                imageRes = await replaceImageColor(image, imageData, color, particle);\n            }\n            else {\n                imageRes = {\n                    color,\n                    data: image,\n                    element: image.element,\n                    gif: image.gif,\n                    gifData: image.gifData,\n                    gifLoopCount: image.gifLoopCount,\n                    loaded: true,\n                    ratio: imageData.width && imageData.height\n                        ? imageData.width / imageData.height\n                        : (image.ratio ?? defaultRatio),\n                    replaceColor: replaceColor,\n                    source: imageData.src,\n                };\n            }\n            if (!imageRes.ratio) {\n                imageRes.ratio = 1;\n            }\n            const fill = imageData.fill ?? particle.shapeFill, close = imageData.close ?? particle.shapeClose, imageShape = {\n                image: imageRes,\n                fill,\n                close,\n            };\n            particle.image = imageShape.image;\n            particle.shapeFill = imageShape.fill;\n            particle.shapeClose = imageShape.close;\n        })();\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nexport class Preload {\n    constructor() {\n        this.src = \"\";\n        this.gif = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.gif !== undefined) {\n            this.gif = data.gif;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.name !== undefined) {\n            this.name = data.name;\n        }\n        if (data.replaceColor !== undefined) {\n            this.replaceColor = data.replaceColor;\n        }\n        if (data.src !== undefined) {\n            this.src = data.src;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\n", "import { Preload } from \"./Options/Classes/Preload.js\";\nexport class ImagePreloaderPlugin {\n    constructor(engine) {\n        this.id = \"imagePreloader\";\n        this._engine = engine;\n    }\n    async getPlugin() {\n        await Promise.resolve();\n        return {};\n    }\n    loadOptions(options, source) {\n        if (!source?.preload) {\n            return;\n        }\n        if (!options.preload) {\n            options.preload = [];\n        }\n        const preloadOptions = options.preload;\n        for (const item of source.preload) {\n            const existing = preloadOptions.find(t => t.name === item.name || t.src === item.src);\n            if (existing) {\n                existing.load(item);\n            }\n            else {\n                const preload = new Preload();\n                preload.load(item);\n                preloadOptions.push(preload);\n            }\n        }\n    }\n    needsPlugin() {\n        return true;\n    }\n}\n", "import { downloadSvgImage, loadImage } from \"./Utils.js\";\nimport { ImageDrawer } from \"./ImageDrawer.js\";\nimport { ImagePreloaderPlugin } from \"./ImagePreloader.js\";\nimport { errorPrefix } from \"@tsparticles/engine\";\nimport { loadGifImage } from \"./GifUtils/Utils.js\";\nconst extLength = 3;\nfunction addLoadImageToEngine(engine) {\n    if (engine.loadImage) {\n        return;\n    }\n    engine.loadImage = async (data) => {\n        if (!data.name && !data.src) {\n            throw new Error(`${errorPrefix} no image source provided`);\n        }\n        if (!engine.images) {\n            engine.images = [];\n        }\n        if (engine.images.find((t) => t.name === data.name || t.source === data.src)) {\n            return;\n        }\n        try {\n            const image = {\n                gif: data.gif ?? false,\n                name: data.name ?? data.src,\n                source: data.src,\n                type: data.src.substring(data.src.length - extLength),\n                error: false,\n                loading: true,\n                replaceColor: data.replaceColor,\n                ratio: data.width && data.height ? data.width / data.height : undefined,\n            };\n            engine.images.push(image);\n            let imageFunc;\n            if (data.gif) {\n                imageFunc = loadGifImage;\n            }\n            else {\n                imageFunc = data.replaceColor ? downloadSvgImage : loadImage;\n            }\n            await imageFunc(image);\n        }\n        catch {\n            throw new Error(`${errorPrefix} ${data.name ?? data.src} not found`);\n        }\n    };\n}\nexport async function loadImageShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    addLoadImageToEngine(engine);\n    const preloader = new ImagePreloaderPlugin(engine);\n    await engine.addPlugin(preloader, refresh);\n    await engine.addShape(new ImageDrawer(engine), refresh);\n}\n", "import { ValueWithRandom, isNull } from \"@tsparticles/engine\";\nexport class LifeDelay extends ValueWithRandom {\n    constructor() {\n        super();\n        this.sync = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { ValueWithRandom, isNull } from \"@tsparticles/engine\";\nexport class LifeDuration extends ValueWithRandom {\n    constructor() {\n        super();\n        this.sync = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        super.load(data);\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { isNull } from \"@tsparticles/engine\";\nimport { LifeDelay } from \"./LifeDelay.js\";\nimport { LifeDuration } from \"./LifeDuration.js\";\nexport class Life {\n    constructor() {\n        this.count = 0;\n        this.delay = new LifeDelay();\n        this.duration = new LifeDuration();\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.count !== undefined) {\n            this.count = data.count;\n        }\n        this.delay.load(data.delay);\n        this.duration.load(data.duration);\n    }\n}\n", "import { getRangeValue, millisecondsToSeconds, randomInRange, setRangeValue, } from \"@tsparticles/engine\";\nconst noTime = 0, infiniteValue = -1, noLife = 0, minCanvasSize = 0;\nexport function updateLife(particle, delta, canvasSize) {\n    if (!particle.life) {\n        return;\n    }\n    const life = particle.life;\n    let justSpawned = false;\n    if (particle.spawning) {\n        life.delayTime += delta.value;\n        if (life.delayTime >= particle.life.delay) {\n            justSpawned = true;\n            particle.spawning = false;\n            life.delayTime = noTime;\n            life.time = noTime;\n        }\n        else {\n            return;\n        }\n    }\n    if (life.duration === infiniteValue) {\n        return;\n    }\n    if (particle.spawning) {\n        return;\n    }\n    if (justSpawned) {\n        life.time = noTime;\n    }\n    else {\n        life.time += delta.value;\n    }\n    if (life.time < life.duration) {\n        return;\n    }\n    life.time = noTime;\n    if (particle.life.count > noLife) {\n        particle.life.count--;\n    }\n    if (particle.life.count === noLife) {\n        particle.destroy();\n        return;\n    }\n    const widthRange = setRangeValue(minCanvasSize, canvasSize.width), heightRange = setRangeValue(minCanvasSize, canvasSize.width);\n    particle.position.x = randomInRange(widthRange);\n    particle.position.y = randomInRange(heightRange);\n    particle.spawning = true;\n    life.delayTime = noTime;\n    life.time = noTime;\n    particle.reset();\n    const lifeOptions = particle.options.life;\n    if (lifeOptions) {\n        life.delay = getRangeValue(lifeOptions.delay.value) * millisecondsToSeconds;\n        life.duration = getRangeValue(lifeOptions.duration.value) * millisecondsToSeconds;\n    }\n}\n", "import { getRandom, getRangeValue, millisecondsToSeconds, } from \"@tsparticles/engine\";\nimport { Life } from \"./Options/Classes/Life.js\";\nimport { updateLife } from \"./Utils.js\";\nconst noTime = 0, identity = 1, infiniteValue = -1;\nexport class LifeUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, particlesOptions = particle.options, lifeOptions = particlesOptions.life;\n        if (!lifeOptions) {\n            return;\n        }\n        particle.life = {\n            delay: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.delay.value) * (lifeOptions.delay.sync ? identity : getRandom())) /\n                    container.retina.reduceFactor) *\n                    millisecondsToSeconds\n                : noTime,\n            delayTime: noTime,\n            duration: container.retina.reduceFactor\n                ? ((getRangeValue(lifeOptions.duration.value) * (lifeOptions.duration.sync ? identity : getRandom())) /\n                    container.retina.reduceFactor) *\n                    millisecondsToSeconds\n                : noTime,\n            time: noTime,\n            count: lifeOptions.count,\n        };\n        if (particle.life.duration <= noTime) {\n            particle.life.duration = infiniteValue;\n        }\n        if (particle.life.count <= noTime) {\n            particle.life.count = infiniteValue;\n        }\n        if (particle.life) {\n            particle.spawning = particle.life.delay > noTime;\n        }\n    }\n    isEnabled(particle) {\n        return !particle.destroyed;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.life) {\n            options.life = new Life();\n        }\n        for (const source of sources) {\n            options.life.load(source?.life);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle) || !particle.life) {\n            return;\n        }\n        updateLife(particle, delta, this.container.canvas.size);\n    }\n}\n", "import { LifeUpdater } from \"./LifeUpdater.js\";\nexport async function loadLifeUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"life\", async (container) => {\n        return Promise.resolve(new LifeUpdater(container));\n    }, refresh);\n}\n", "export function drawLine(data) {\n    const { context, particle, radius } = data, shapeData = particle.shapeData, centerY = 0;\n    context.moveTo(-radius, centerY);\n    context.lineTo(radius, centerY);\n    context.lineCap = shapeData?.cap ?? \"butt\";\n}\n", "import { drawLine } from \"./Utils.js\";\nconst sides = 1;\nexport class LineDrawer {\n    constructor() {\n        this.validTypes = [\"line\"];\n    }\n    draw(data) {\n        drawLine(data);\n    }\n    getSidesCount() {\n        return sides;\n    }\n}\n", "import { LineDrawer } from \"./LineDrawer.js\";\nexport async function loadLineShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new LineDrawer(), refresh);\n}\n", "import { isSsr } from \"@tsparticles/engine\";\nconst half = 0.5;\nexport class ParallaxMover {\n    init() {\n    }\n    isEnabled(particle) {\n        return (!isSsr() &&\n            !particle.destroyed &&\n            particle.container.actualOptions.interactivity.events.onHover.parallax.enable);\n    }\n    move(particle) {\n        const container = particle.container, options = container.actualOptions, parallaxOptions = options.interactivity.events.onHover.parallax;\n        if (isSsr() || !parallaxOptions.enable) {\n            return;\n        }\n        const parallaxForce = parallaxOptions.force, mousePos = container.interactivity.mouse.position;\n        if (!mousePos) {\n            return;\n        }\n        const canvasSize = container.canvas.size, canvasCenter = {\n            x: canvasSize.width * half,\n            y: canvasSize.height * half,\n        }, parallaxSmooth = parallaxOptions.smooth, factor = particle.getRadius() / parallaxForce, centerDistance = {\n            x: (mousePos.x - canvasCenter.x) * factor,\n            y: (mousePos.y - canvasCenter.y) * factor,\n        }, { offset } = particle;\n        offset.x += (centerDistance.x - offset.x) / parallaxSmooth;\n        offset.y += (centerDistance.y - offset.y) / parallaxSmooth;\n    }\n}\n", "import { ParallaxMover } from \"./ParallaxMover.js\";\nexport async function loadParallaxMover(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addMover(\"parallax\", () => {\n        return Promise.resolve(new ParallaxMover());\n    }, refresh);\n}\n", "import { ParticlesInteractorBase, getDistances, getRangeValue, } from \"@tsparticles/engine\";\nconst attractFactor = 1000, identity = 1;\nexport class Attractor extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact(p1) {\n        const container = this.container;\n        if (p1.attractDistance === undefined) {\n            p1.attractDistance = getRangeValue(p1.options.move.attract.distance) * container.retina.pixelRatio;\n        }\n        const distance = p1.attractDistance, pos1 = p1.getPosition(), query = container.particles.quadTree.queryCircle(pos1, distance);\n        for (const p2 of query) {\n            if (p1 === p2 || !p2.options.move.attract.enable || p2.destroyed || p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition(), { dx, dy } = getDistances(pos1, pos2), rotate = p1.options.move.attract.rotate, ax = dx / (rotate.x * attractFactor), ay = dy / (rotate.y * attractFactor), p1Factor = p2.size.value / p1.size.value, p2Factor = identity / p1Factor;\n            p1.velocity.x -= ax * p1Factor;\n            p1.velocity.y -= ay * p1Factor;\n            p2.velocity.x += ax * p2Factor;\n            p2.velocity.y += ay * p2Factor;\n        }\n    }\n    isEnabled(particle) {\n        return particle.options.move.attract.enable;\n    }\n    reset() {\n    }\n}\n", "import { Attractor } from \"./Attractor.js\";\nexport async function loadParticlesAttractInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"particlesAttract\", container => {\n        return Promise.resolve(new Attractor(container));\n    }, refresh);\n}\n", "import { clamp } from \"@tsparticles/engine\";\nconst half = 0.5, absorbFactor = 10, minAbsorbFactor = 0;\nfunction updateAbsorb(p1, r1, p2, r2, delta, pixelRatio) {\n    const factor = clamp((p1.options.collisions.absorb.speed * delta.factor) / absorbFactor, minAbsorbFactor, r2);\n    p1.size.value += factor * half;\n    p2.size.value -= factor;\n    if (r2 <= pixelRatio) {\n        p2.size.value = 0;\n        p2.destroy();\n    }\n}\nexport function absorb(p1, p2, delta, pixelRatio) {\n    const r1 = p1.getRadius(), r2 = p2.getRadius();\n    if (r1 === undefined && r2 !== undefined) {\n        p1.destroy();\n    }\n    else if (r1 !== undefined && r2 === undefined) {\n        p2.destroy();\n    }\n    else if (r1 !== undefined && r2 !== undefined) {\n        if (r1 >= r2) {\n            updateAbsorb(p1, r1, p2, r2, delta, pixelRatio);\n        }\n        else {\n            updateAbsorb(p2, r2, p1, r1, delta, pixelRatio);\n        }\n    }\n}\n", "import { circleBounce, circleBounceDataFromParticle, getRangeValue } from \"@tsparticles/engine\";\nconst fixBounceSpeed = (p) => {\n    if (p.collisionMaxSpeed === undefined) {\n        p.collisionMaxSpeed = getRangeValue(p.options.collisions.maxSpeed);\n    }\n    if (p.velocity.length > p.collisionMaxSpeed) {\n        p.velocity.length = p.collisionMaxSpeed;\n    }\n};\nexport function bounce(p1, p2) {\n    circleBounce(circleBounceDataFromParticle(p1), circleBounceDataFromParticle(p2));\n    fixBounceSpeed(p1);\n    fixBounceSpeed(p2);\n}\n", "import { bounce } from \"./Bounce.js\";\nexport function destroy(p1, p2) {\n    if (!p1.unbreakable && !p2.unbreakable) {\n        bounce(p1, p2);\n    }\n    if (p1.getRadius() === undefined && p2.getRadius() !== undefined) {\n        p1.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() === undefined) {\n        p2.destroy();\n    }\n    else if (p1.getRadius() !== undefined && p2.getRadius() !== undefined) {\n        const deleteP = p1.getRadius() >= p2.getRadius() ? p2 : p1;\n        deleteP.destroy();\n    }\n}\n", "import { CollisionMode } from \"@tsparticles/engine\";\nimport { absorb } from \"./Absorb.js\";\nimport { bounce } from \"./Bounce.js\";\nimport { destroy } from \"./Destroy.js\";\nexport function resolveCollision(p1, p2, delta, pixelRatio) {\n    switch (p1.options.collisions.mode) {\n        case CollisionMode.absorb: {\n            absorb(p1, p2, delta, pixelRatio);\n            break;\n        }\n        case CollisionMode.bounce: {\n            bounce(p1, p2);\n            break;\n        }\n        case CollisionMode.destroy: {\n            destroy(p1, p2);\n            break;\n        }\n    }\n}\n", "import { ParticlesInteractorBase, getDistance } from \"@tsparticles/engine\";\nimport { resolveCollision } from \"./ResolveCollision.js\";\nconst double = 2;\nexport class Collider extends ParticlesInteractorBase {\n    constructor(container) {\n        super(container);\n    }\n    clear() {\n    }\n    init() {\n    }\n    interact(p1, delta) {\n        if (p1.destroyed || p1.spawning) {\n            return;\n        }\n        const container = this.container, pos1 = p1.getPosition(), radius1 = p1.getRadius(), query = container.particles.quadTree.queryCircle(pos1, radius1 * double);\n        for (const p2 of query) {\n            if (p1 === p2 ||\n                !p2.options.collisions.enable ||\n                p1.options.collisions.mode !== p2.options.collisions.mode ||\n                p2.destroyed ||\n                p2.spawning) {\n                continue;\n            }\n            const pos2 = p2.getPosition(), radius2 = p2.getRadius();\n            if (Math.abs(Math.round(pos1.z) - Math.round(pos2.z)) > radius1 + radius2) {\n                continue;\n            }\n            const dist = getDistance(pos1, pos2), distP = radius1 + radius2;\n            if (dist > distP) {\n                continue;\n            }\n            resolveCollision(p1, p2, delta, container.retina.pixelRatio);\n        }\n    }\n    isEnabled(particle) {\n        return particle.options.collisions.enable;\n    }\n    reset() {\n    }\n}\n", "import { Collider } from \"./Collider.js\";\nexport async function loadParticlesCollisionsInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addInteractor(\"particlesCollisions\", container => {\n        return Promise.resolve(new Collider(container));\n    }, refresh);\n}\n", "import { Circle, Rectangle } from \"@tsparticles/engine\";\nconst double = 2;\nexport class CircleWarp extends Circle {\n    constructor(x, y, radius, canvasSize) {\n        super(x, y, radius);\n        this.canvasSize = canvasSize;\n        this.canvasSize = { ...canvasSize };\n    }\n    contains(point) {\n        const { width, height } = this.canvasSize, { x, y } = point;\n        return (super.contains(point) ||\n            super.contains({ x: x - width, y }) ||\n            super.contains({ x: x - width, y: y - height }) ||\n            super.contains({ x, y: y - height }));\n    }\n    intersects(range) {\n        if (super.intersects(range)) {\n            return true;\n        }\n        const rect = range, circle = range, newPos = {\n            x: range.position.x - this.canvasSize.width,\n            y: range.position.y - this.canvasSize.height,\n        };\n        if (circle.radius !== undefined) {\n            const biggerCircle = new Circle(newPos.x, newPos.y, circle.radius * double);\n            return super.intersects(biggerCircle);\n        }\n        else if (rect.size !== undefined) {\n            const rectSW = new Rectangle(newPos.x, newPos.y, rect.size.width * double, rect.size.height * double);\n            return super.intersects(rectSW);\n        }\n        return false;\n    }\n}\n", "import { OptionsColor, isNull } from \"@tsparticles/engine\";\nexport class LinksShadow {\n    constructor() {\n        this.blur = 5;\n        this.color = new OptionsColor();\n        this.color.value = \"#000\";\n        this.enable = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.blur !== undefined) {\n            this.blur = data.blur;\n        }\n        this.color = OptionsColor.create(this.color, data.color);\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n    }\n}\n", "import { OptionsColor, isNull } from \"@tsparticles/engine\";\nexport class LinksTriangle {\n    constructor() {\n        this.enable = false;\n        this.frequency = 1;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.color !== undefined) {\n            this.color = OptionsColor.create(this.color, data.color);\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n    }\n}\n", "import { OptionsColor, isNull } from \"@tsparticles/engine\";\nimport { LinksShadow } from \"./LinksShadow.js\";\nimport { LinksTriangle } from \"./LinksTriangle.js\";\nexport class Links {\n    constructor() {\n        this.blink = false;\n        this.color = new OptionsColor();\n        this.color.value = \"#fff\";\n        this.consent = false;\n        this.distance = 100;\n        this.enable = false;\n        this.frequency = 1;\n        this.opacity = 1;\n        this.shadow = new LinksShadow();\n        this.triangles = new LinksTriangle();\n        this.width = 1;\n        this.warp = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.id !== undefined) {\n            this.id = data.id;\n        }\n        if (data.blink !== undefined) {\n            this.blink = data.blink;\n        }\n        this.color = OptionsColor.create(this.color, data.color);\n        if (data.consent !== undefined) {\n            this.consent = data.consent;\n        }\n        if (data.distance !== undefined) {\n            this.distance = data.distance;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.frequency !== undefined) {\n            this.frequency = data.frequency;\n        }\n        if (data.opacity !== undefined) {\n            this.opacity = data.opacity;\n        }\n        this.shadow.load(data.shadow);\n        this.triangles.load(data.triangles);\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n        if (data.warp !== undefined) {\n            this.warp = data.warp;\n        }\n    }\n}\n", "import { Circle, ParticlesInteractorBase, getDistances, getLinkRandomColor, } from \"@tsparticles/engine\";\nimport { CircleWarp } from \"./CircleWarp.js\";\nimport { Links } from \"./Options/Classes/Links.js\";\nconst squarePower = 2, opacityOffset = 1, origin = {\n    x: 0,\n    y: 0,\n}, minDistance = 0;\nfunction getLinkDistance(pos1, pos2, optDistance, canvasSize, warp) {\n    const { dx, dy, distance } = getDistances(pos1, pos2);\n    if (!warp || distance <= optDistance) {\n        return distance;\n    }\n    const absDiffs = {\n        x: Math.abs(dx),\n        y: Math.abs(dy),\n    }, warpDistances = {\n        x: Math.min(absDiffs.x, canvasSize.width - absDiffs.x),\n        y: Math.min(absDiffs.y, canvasSize.height - absDiffs.y),\n    };\n    return Math.sqrt(warpDistances.x ** squarePower + warpDistances.y ** squarePower);\n}\nexport class Linker extends ParticlesInteractorBase {\n    constructor(container, engine) {\n        super(container);\n        this._setColor = p1 => {\n            if (!p1.options.links) {\n                return;\n            }\n            const container = this._linkContainer, linksOptions = p1.options.links;\n            let linkColor = linksOptions.id === undefined\n                ? container.particles.linksColor\n                : container.particles.linksColors.get(linksOptions.id);\n            if (linkColor) {\n                return;\n            }\n            const optColor = linksOptions.color;\n            linkColor = getLinkRandomColor(this._engine, optColor, linksOptions.blink, linksOptions.consent);\n            if (linksOptions.id === undefined) {\n                container.particles.linksColor = linkColor;\n            }\n            else {\n                container.particles.linksColors.set(linksOptions.id, linkColor);\n            }\n        };\n        this._linkContainer = container;\n        this._engine = engine;\n    }\n    clear() {\n    }\n    init() {\n        this._linkContainer.particles.linksColor = undefined;\n        this._linkContainer.particles.linksColors = new Map();\n    }\n    interact(p1) {\n        if (!p1.options.links) {\n            return;\n        }\n        p1.links = [];\n        const pos1 = p1.getPosition(), container = this.container, canvasSize = container.canvas.size;\n        if (pos1.x < origin.x || pos1.y < origin.y || pos1.x > canvasSize.width || pos1.y > canvasSize.height) {\n            return;\n        }\n        const linkOpt1 = p1.options.links, optOpacity = linkOpt1.opacity, optDistance = p1.retina.linksDistance ?? minDistance, warp = linkOpt1.warp;\n        let range;\n        if (warp) {\n            range = new CircleWarp(pos1.x, pos1.y, optDistance, canvasSize);\n        }\n        else {\n            range = new Circle(pos1.x, pos1.y, optDistance);\n        }\n        const query = container.particles.quadTree.query(range);\n        for (const p2 of query) {\n            const linkOpt2 = p2.options.links;\n            if (p1 === p2 ||\n                !linkOpt2?.enable ||\n                linkOpt1.id !== linkOpt2.id ||\n                p2.spawning ||\n                p2.destroyed ||\n                !p2.links ||\n                p1.links.some(t => t.destination === p2) ||\n                p2.links.some(t => t.destination === p1)) {\n                continue;\n            }\n            const pos2 = p2.getPosition();\n            if (pos2.x < origin.x || pos2.y < origin.y || pos2.x > canvasSize.width || pos2.y > canvasSize.height) {\n                continue;\n            }\n            const distance = getLinkDistance(pos1, pos2, optDistance, canvasSize, warp && linkOpt2.warp);\n            if (distance > optDistance) {\n                continue;\n            }\n            const opacityLine = (opacityOffset - distance / optDistance) * optOpacity;\n            this._setColor(p1);\n            p1.links.push({\n                destination: p2,\n                opacity: opacityLine,\n            });\n        }\n    }\n    isEnabled(particle) {\n        return !!particle.options.links?.enable;\n    }\n    loadParticlesOptions(options, ...sources) {\n        if (!options.links) {\n            options.links = new Links();\n        }\n        for (const source of sources) {\n            options.links.load(source?.links);\n        }\n    }\n    reset() {\n    }\n}\n", "import { Linker } from \"./Linker.js\";\nexport async function loadLinksInteraction(engine, refresh = true) {\n    await engine.addInteractor(\"particlesLinks\", async (container) => {\n        return Promise.resolve(new Linker(container, engine));\n    }, refresh);\n}\n", "import { drawLine, getDistance, getDistances, getRandom, getStyleFromRgb, rangeColorToRgb, } from \"@tsparticles/engine\";\nexport function drawTriangle(context, p1, p2, p3) {\n    context.beginPath();\n    context.moveTo(p1.x, p1.y);\n    context.lineTo(p2.x, p2.y);\n    context.lineTo(p3.x, p3.y);\n    context.closePath();\n}\nexport function drawLinkLine(params) {\n    let drawn = false;\n    const { begin, end, engine, maxDistance, context, canvasSize, width, backgroundMask, colorLine, opacity, links } = params;\n    if (getDistance(begin, end) <= maxDistance) {\n        drawLine(context, begin, end);\n        drawn = true;\n    }\n    else if (links.warp) {\n        let pi1;\n        let pi2;\n        const endNE = {\n            x: end.x - canvasSize.width,\n            y: end.y,\n        };\n        const d1 = getDistances(begin, endNE);\n        if (d1.distance <= maxDistance) {\n            const yi = begin.y - (d1.dy / d1.dx) * begin.x;\n            pi1 = { x: 0, y: yi };\n            pi2 = { x: canvasSize.width, y: yi };\n        }\n        else {\n            const endSW = {\n                x: end.x,\n                y: end.y - canvasSize.height,\n            };\n            const d2 = getDistances(begin, endSW);\n            if (d2.distance <= maxDistance) {\n                const yi = begin.y - (d2.dy / d2.dx) * begin.x;\n                const xi = -yi / (d2.dy / d2.dx);\n                pi1 = { x: xi, y: 0 };\n                pi2 = { x: xi, y: canvasSize.height };\n            }\n            else {\n                const endSE = {\n                    x: end.x - canvasSize.width,\n                    y: end.y - canvasSize.height,\n                };\n                const d3 = getDistances(begin, endSE);\n                if (d3.distance <= maxDistance) {\n                    const yi = begin.y - (d3.dy / d3.dx) * begin.x;\n                    const xi = -yi / (d3.dy / d3.dx);\n                    pi1 = { x: xi, y: yi };\n                    pi2 = { x: pi1.x + canvasSize.width, y: pi1.y + canvasSize.height };\n                }\n            }\n        }\n        if (pi1 && pi2) {\n            drawLine(context, begin, pi1);\n            drawLine(context, end, pi2);\n            drawn = true;\n        }\n    }\n    if (!drawn) {\n        return;\n    }\n    context.lineWidth = width;\n    if (backgroundMask.enable) {\n        context.globalCompositeOperation = backgroundMask.composite;\n    }\n    context.strokeStyle = getStyleFromRgb(colorLine, opacity);\n    const { shadow } = links;\n    if (shadow.enable) {\n        const shadowColor = rangeColorToRgb(engine, shadow.color);\n        if (shadowColor) {\n            context.shadowBlur = shadow.blur;\n            context.shadowColor = getStyleFromRgb(shadowColor);\n        }\n    }\n    context.stroke();\n}\nexport function drawLinkTriangle(params) {\n    const { context, pos1, pos2, pos3, backgroundMask, colorTriangle, opacityTriangle } = params;\n    drawTriangle(context, pos1, pos2, pos3);\n    if (backgroundMask.enable) {\n        context.globalCompositeOperation = backgroundMask.composite;\n    }\n    context.fillStyle = getStyleFromRgb(colorTriangle, opacityTriangle);\n    context.fill();\n}\nexport function getLinkKey(ids) {\n    ids.sort((a, b) => a - b);\n    return ids.join(\"_\");\n}\nexport function setLinkFrequency(particles, dictionary) {\n    const key = getLinkKey(particles.map(t => t.id));\n    let res = dictionary.get(key);\n    if (res === undefined) {\n        res = getRandom();\n        dictionary.set(key, res);\n    }\n    return res;\n}\n", "import { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb, } from \"@tsparticles/engine\";\nimport { drawLinkLine, drawLinkTriangle, setLinkFrequency } from \"./Utils.js\";\nconst minOpacity = 0, minWidth = 0, minDistance = 0, half = 0.5, maxFrequency = 1;\nexport class LinkInstance {\n    constructor(container, engine) {\n        this._drawLinkLine = (p1, link) => {\n            const p1LinksOptions = p1.options.links;\n            if (!p1LinksOptions?.enable) {\n                return;\n            }\n            const container = this._container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\n            let opacity = link.opacity;\n            container.canvas.draw(ctx => {\n                let colorLine;\n                const twinkle = p1.options.twinkle?.lines;\n                if (twinkle?.enable) {\n                    const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(this._engine, twinkle.color), twinkling = getRandom() < twinkleFreq;\n                    if (twinkling && twinkleRgb) {\n                        colorLine = twinkleRgb;\n                        opacity = getRangeValue(twinkle.opacity);\n                    }\n                }\n                if (!colorLine) {\n                    const linkColor = p1LinksOptions.id !== undefined\n                        ? container.particles.linksColors.get(p1LinksOptions.id)\n                        : container.particles.linksColor;\n                    colorLine = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorLine) {\n                    return;\n                }\n                const width = p1.retina.linksWidth ?? minWidth, maxDistance = p1.retina.linksDistance ?? minDistance, { backgroundMask } = options;\n                drawLinkLine({\n                    context: ctx,\n                    width,\n                    begin: pos1,\n                    end: pos2,\n                    engine: this._engine,\n                    maxDistance,\n                    canvasSize: container.canvas.size,\n                    links: p1LinksOptions,\n                    backgroundMask: backgroundMask,\n                    colorLine,\n                    opacity,\n                });\n            });\n        };\n        this._drawLinkTriangle = (p1, link1, link2) => {\n            const linksOptions = p1.options.links;\n            if (!linksOptions?.enable) {\n                return;\n            }\n            const triangleOptions = linksOptions.triangles;\n            if (!triangleOptions.enable) {\n                return;\n            }\n            const container = this._container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, opacityTriangle = triangleOptions.opacity ?? (link1.opacity + link2.opacity) * half;\n            if (opacityTriangle <= minOpacity) {\n                return;\n            }\n            container.canvas.draw(ctx => {\n                const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition(), linksDistance = p1.retina.linksDistance ?? minDistance;\n                if (getDistance(pos1, pos2) > linksDistance ||\n                    getDistance(pos3, pos2) > linksDistance ||\n                    getDistance(pos3, pos1) > linksDistance) {\n                    return;\n                }\n                let colorTriangle = rangeColorToRgb(this._engine, triangleOptions.color);\n                if (!colorTriangle) {\n                    const linkColor = linksOptions.id !== undefined\n                        ? container.particles.linksColors.get(linksOptions.id)\n                        : container.particles.linksColor;\n                    colorTriangle = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorTriangle) {\n                    return;\n                }\n                drawLinkTriangle({\n                    context: ctx,\n                    pos1,\n                    pos2,\n                    pos3,\n                    backgroundMask: options.backgroundMask,\n                    colorTriangle,\n                    opacityTriangle,\n                });\n            });\n        };\n        this._drawTriangles = (options, p1, link, p1Links) => {\n            const p2 = link.destination;\n            if (!(options.links?.triangles.enable && p2.options.links?.triangles.enable)) {\n                return;\n            }\n            const vertices = p2.links?.filter(t => {\n                const linkFreq = this._getLinkFrequency(p2, t.destination), minCount = 0;\n                return (p2.options.links &&\n                    linkFreq <= p2.options.links.frequency &&\n                    p1Links.findIndex(l => l.destination === t.destination) >= minCount);\n            });\n            if (!vertices?.length) {\n                return;\n            }\n            for (const vertex of vertices) {\n                const p3 = vertex.destination, triangleFreq = this._getTriangleFrequency(p1, p2, p3);\n                if (triangleFreq > options.links.triangles.frequency) {\n                    continue;\n                }\n                this._drawLinkTriangle(p1, link, vertex);\n            }\n        };\n        this._getLinkFrequency = (p1, p2) => {\n            return setLinkFrequency([p1, p2], this._freqs.links);\n        };\n        this._getTriangleFrequency = (p1, p2, p3) => {\n            return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n        };\n        this._container = container;\n        this._engine = engine;\n        this._freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n    }\n    drawParticle(context, particle) {\n        const { links, options } = particle;\n        if (!links?.length) {\n            return;\n        }\n        const p1Links = links.filter(l => options.links &&\n            (options.links.frequency >= maxFrequency ||\n                this._getLinkFrequency(particle, l.destination) <= options.links.frequency));\n        for (const link of p1Links) {\n            this._drawTriangles(options, particle, link, p1Links);\n            if (link.opacity > minOpacity && (particle.retina.linksWidth ?? minWidth) > minWidth) {\n                this._drawLinkLine(particle, link);\n            }\n        }\n    }\n    async init() {\n        this._freqs.links = new Map();\n        this._freqs.triangles = new Map();\n        await Promise.resolve();\n    }\n    particleCreated(particle) {\n        particle.links = [];\n        if (!particle.options.links) {\n            return;\n        }\n        const ratio = this._container.retina.pixelRatio, { retina } = particle, { distance, width } = particle.options.links;\n        retina.linksDistance = distance * ratio;\n        retina.linksWidth = width * ratio;\n    }\n    particleDestroyed(particle) {\n        particle.links = [];\n    }\n}\n", "import { LinkInstance } from \"./LinkInstance.js\";\nexport class LinksPlugin {\n    constructor(engine) {\n        this.id = \"links\";\n        this._engine = engine;\n    }\n    getPlugin(container) {\n        return Promise.resolve(new LinkInstance(container, this._engine));\n    }\n    loadOptions() {\n    }\n    needsPlugin() {\n        return true;\n    }\n}\n", "import { LinksPlugin } from \"./LinksPlugin.js\";\nexport async function loadLinksPlugin(engine, refresh = true) {\n    const plugin = new LinksPlugin(engine);\n    await engine.addPlugin(plugin, refresh);\n}\n", "import { loadLinksInteraction } from \"./interaction.js\";\nimport { loadLinksPlugin } from \"./plugin.js\";\nexport async function loadParticlesLinksInteraction(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await loadLinksInteraction(engine, refresh);\n    await loadLinksPlugin(engine, refresh);\n}\nexport * from \"./Options/Classes/Links.js\";\nexport * from \"./Options/Classes/LinksShadow.js\";\nexport * from \"./Options/Classes/LinksTriangle.js\";\nexport * from \"./Options/Interfaces/ILinks.js\";\nexport * from \"./Options/Interfaces/ILinksShadow.js\";\nexport * from \"./Options/Interfaces/ILinksTriangle.js\";\n", "import { degToRad } from \"@tsparticles/engine\";\nconst piDeg = 180, origin = { x: 0, y: 0 }, sidesOffset = 2;\nexport function drawPolygon(data, start, side) {\n    const { context } = data, sideCount = side.count.numerator * side.count.denominator, decimalSides = side.count.numerator / side.count.denominator, interiorAngleDegrees = (piDeg * (decimalSides - sidesOffset)) / decimalSides, interiorAngle = Math.PI - degToRad(interiorAngleDegrees);\n    if (!context) {\n        return;\n    }\n    context.beginPath();\n    context.translate(start.x, start.y);\n    context.moveTo(origin.x, origin.y);\n    for (let i = 0; i < sideCount; i++) {\n        context.lineTo(side.length, origin.y);\n        context.translate(side.length, origin.y);\n        context.rotate(interiorAngle);\n    }\n}\n", "import { getRangeValue, } from \"@tsparticles/engine\";\nimport { drawPolygon } from \"./Utils.js\";\nconst defaultSides = 5;\nexport class PolygonDrawerBase {\n    draw(data) {\n        const { particle, radius } = data, start = this.getCenter(particle, radius), side = this.getSidesData(particle, radius);\n        drawPolygon(data, start, side);\n    }\n    getSidesCount(particle) {\n        const polygon = particle.shapeData;\n        return Math.round(getRangeValue(polygon?.sides ?? defaultSides));\n    }\n}\n", "import { PolygonDrawerBase } from \"./PolygonDrawerBase.js\";\nconst sidesCenterFactor = 3.5, yFactor = 2.66, sidesFactor = 3;\nexport class PolygonDrawer extends PolygonDrawerBase {\n    constructor() {\n        super(...arguments);\n        this.validTypes = [\"polygon\"];\n    }\n    getCenter(particle, radius) {\n        return {\n            x: -radius / (particle.sides / sidesCenterFactor),\n            y: -radius / (yFactor / sidesCenterFactor),\n        };\n    }\n    getSidesData(particle, radius) {\n        const sides = particle.sides;\n        return {\n            count: {\n                denominator: 1,\n                numerator: sides,\n            },\n            length: (radius * yFactor) / (sides / sidesFactor),\n        };\n    }\n}\n", "import { PolygonDrawerBase } from \"./PolygonDrawerBase.js\";\nconst yFactor = 1.66, sides = 3, double = 2;\nexport class TriangleDrawer extends PolygonDrawerBase {\n    constructor() {\n        super(...arguments);\n        this.validTypes = [\"triangle\"];\n    }\n    getCenter(particle, radius) {\n        return {\n            x: -radius,\n            y: radius / yFactor,\n        };\n    }\n    getSidesCount() {\n        return sides;\n    }\n    getSidesData(particle, radius) {\n        const diameter = radius * double;\n        return {\n            count: {\n                denominator: 2,\n                numerator: 3,\n            },\n            length: diameter,\n        };\n    }\n}\n", "import { PolygonDrawer } from \"./PolygonDrawer.js\";\nimport { TriangleDrawer } from \"./TriangleDrawer.js\";\nexport async function loadGenericPolygonShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new PolygonDrawer(), refresh);\n}\nexport async function loadTriangleShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new TriangleDrawer(), refresh);\n}\nexport async function loadPolygonShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await loadGenericPolygonShape(engine, refresh);\n    await loadTriangleShape(engine, refresh);\n}\n", "import { isNull, setRangeValue } from \"@tsparticles/engine\";\nexport class RotateAnimation {\n    constructor() {\n        this.enable = false;\n        this.speed = 0;\n        this.decay = 0;\n        this.sync = false;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        if (data.enable !== undefined) {\n            this.enable = data.enable;\n        }\n        if (data.speed !== undefined) {\n            this.speed = setRangeValue(data.speed);\n        }\n        if (data.decay !== undefined) {\n            this.decay = setRangeValue(data.decay);\n        }\n        if (data.sync !== undefined) {\n            this.sync = data.sync;\n        }\n    }\n}\n", "import { RotateDirection, ValueWithRandom, isNull, } from \"@tsparticles/engine\";\nimport { RotateAnimation } from \"./RotateAnimation.js\";\nexport class Rotate extends ValueWithRandom {\n    constructor() {\n        super();\n        this.animation = new RotateAnimation();\n        this.direction = RotateDirection.clockwise;\n        this.path = false;\n        this.value = 0;\n    }\n    load(data) {\n        if (isNull(data)) {\n            return;\n        }\n        super.load(data);\n        if (data.direction !== undefined) {\n            this.direction = data.direction;\n        }\n        this.animation.load(data.animation);\n        if (data.path !== undefined) {\n            this.path = data.path;\n        }\n    }\n}\n", "import { AnimationStatus, DestroyType, RotateDirection, degToRad, getRandom, getRangeValue, updateAnimation, } from \"@tsparticles/engine\";\nimport { Rotate } from \"./Options/Classes/Rotate.js\";\nconst double = 2, doublePI = Math.PI * double, identity = 1, doublePIDeg = 360;\nexport class RotateUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const rotateOptions = particle.options.rotate;\n        if (!rotateOptions) {\n            return;\n        }\n        particle.rotate = {\n            enable: rotateOptions.animation.enable,\n            value: degToRad(getRangeValue(rotateOptions.value)),\n            min: 0,\n            max: doublePI,\n        };\n        particle.pathRotation = rotateOptions.path;\n        let rotateDirection = rotateOptions.direction;\n        if (rotateDirection === RotateDirection.random) {\n            const index = Math.floor(getRandom() * double), minIndex = 0;\n            rotateDirection = index > minIndex ? RotateDirection.counterClockwise : RotateDirection.clockwise;\n        }\n        switch (rotateDirection) {\n            case RotateDirection.counterClockwise:\n            case \"counterClockwise\":\n                particle.rotate.status = AnimationStatus.decreasing;\n                break;\n            case RotateDirection.clockwise:\n                particle.rotate.status = AnimationStatus.increasing;\n                break;\n        }\n        const rotateAnimation = rotateOptions.animation;\n        if (rotateAnimation.enable) {\n            particle.rotate.decay = identity - getRangeValue(rotateAnimation.decay);\n            particle.rotate.velocity =\n                (getRangeValue(rotateAnimation.speed) / doublePIDeg) * this.container.retina.reduceFactor;\n            if (!rotateAnimation.sync) {\n                particle.rotate.velocity *= getRandom();\n            }\n        }\n        particle.rotation = particle.rotate.value;\n    }\n    isEnabled(particle) {\n        const rotate = particle.options.rotate;\n        if (!rotate) {\n            return false;\n        }\n        return !particle.destroyed && !particle.spawning && (!!rotate.value || rotate.animation.enable || rotate.path);\n    }\n    loadOptions(options, ...sources) {\n        if (!options.rotate) {\n            options.rotate = new Rotate();\n        }\n        for (const source of sources) {\n            options.rotate.load(source?.rotate);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        particle.isRotating = !!particle.rotate;\n        if (!particle.rotate) {\n            return;\n        }\n        updateAnimation(particle, particle.rotate, false, DestroyType.none, delta);\n        particle.rotation = particle.rotate.value;\n    }\n}\n", "import { RotateUpdater } from \"./RotateUpdater.js\";\nexport async function loadRotateUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"rotate\", container => {\n        return Promise.resolve(new RotateUpdater(container));\n    }, refresh);\n}\n", "const fixFactorSquared = 2, fixFactor = Math.sqrt(fixFactorSquared), double = 2;\nexport function drawSquare(data) {\n    const { context, radius } = data, fixedRadius = radius / fixFactor, fixedDiameter = fixedRadius * double;\n    context.rect(-fixedRadius, -fixedRadius, fixedDiameter, fixedDiameter);\n}\n", "import { drawSquare } from \"./Utils.js\";\nconst sides = 4;\nexport class SquareDrawer {\n    constructor() {\n        this.validTypes = [\"edge\", \"square\"];\n    }\n    draw(data) {\n        drawSquare(data);\n    }\n    getSidesCount() {\n        return sides;\n    }\n}\n", "import { SquareDrawer } from \"./SquareDrawer.js\";\nexport async function loadSquareShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new SquareDrawer(), refresh);\n}\n", "const defaultInset = 2, origin = { x: 0, y: 0 };\nexport function drawStar(data) {\n    const { context, particle, radius } = data, sides = particle.sides, inset = particle.starInset ?? defaultInset;\n    context.moveTo(origin.x, origin.y - radius);\n    for (let i = 0; i < sides; i++) {\n        context.rotate(Math.PI / sides);\n        context.lineTo(origin.x, origin.y - radius * inset);\n        context.rotate(Math.PI / sides);\n        context.lineTo(origin.x, origin.y - radius);\n    }\n}\n", "import { getRangeValue, } from \"@tsparticles/engine\";\nimport { drawStar } from \"./Utils.js\";\nconst defaultInset = 2, defaultSides = 5;\nexport class StarDrawer {\n    constructor() {\n        this.validTypes = [\"star\"];\n    }\n    draw(data) {\n        drawStar(data);\n    }\n    getSidesCount(particle) {\n        const star = particle.shapeData;\n        return Math.round(getRangeValue(star?.sides ?? defaultSides));\n    }\n    particleInit(container, particle) {\n        const star = particle.shapeData;\n        particle.starInset = getRangeValue(star?.inset ?? defaultInset);\n    }\n}\n", "import { StarDrawer } from \"./StarDrawer.js\";\nexport async function loadStarShape(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addShape(new StarDrawer(), refresh);\n}\n", "import { getHslAnimationFromHsl, getRangeValue, itemFromSingleOrMultiple, rangeColorToHsl, updateColor, } from \"@tsparticles/engine\";\nconst defaultOpacity = 1;\nexport class StrokeColorUpdater {\n    constructor(container, engine) {\n        this._container = container;\n        this._engine = engine;\n    }\n    init(particle) {\n        const container = this._container, options = particle.options;\n        const stroke = itemFromSingleOrMultiple(options.stroke, particle.id, options.reduceDuplicates);\n        particle.strokeWidth = getRangeValue(stroke.width) * container.retina.pixelRatio;\n        particle.strokeOpacity = getRangeValue(stroke.opacity ?? defaultOpacity);\n        particle.strokeAnimation = stroke.color?.animation;\n        const strokeHslColor = rangeColorToHsl(this._engine, stroke.color) ?? particle.getFillColor();\n        if (strokeHslColor) {\n            particle.strokeColor = getHslAnimationFromHsl(strokeHslColor, particle.strokeAnimation, container.retina.reduceFactor);\n        }\n    }\n    isEnabled(particle) {\n        const color = particle.strokeAnimation, { strokeColor } = particle;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!color &&\n            ((strokeColor?.h.value !== undefined && strokeColor.h.enable) ||\n                (strokeColor?.s.value !== undefined && strokeColor.s.enable) ||\n                (strokeColor?.l.value !== undefined && strokeColor.l.enable)));\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateColor(particle.strokeColor, delta);\n    }\n}\n", "import { StrokeColorUpdater } from \"./StrokeColorUpdater.js\";\nexport async function loadStrokeColorUpdater(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await engine.addParticleUpdater(\"strokeColor\", container => {\n        return Promise.resolve(new StrokeColorUpdater(container, engine));\n    }, refresh);\n}\n", "import { loadBasic } from \"@tsparticles/basic\";\nimport { loadEasingQuadPlugin } from \"@tsparticles/plugin-easing-quad\";\nimport { loadEmojiShape } from \"@tsparticles/shape-emoji\";\nimport { loadExternalAttractInteraction } from \"@tsparticles/interaction-external-attract\";\nimport { loadExternalBounceInteraction } from \"@tsparticles/interaction-external-bounce\";\nimport { loadExternalBubbleInteraction } from \"@tsparticles/interaction-external-bubble\";\nimport { loadExternalConnectInteraction } from \"@tsparticles/interaction-external-connect\";\nimport { loadExternalGrabInteraction } from \"@tsparticles/interaction-external-grab\";\nimport { loadExternalPauseInteraction } from \"@tsparticles/interaction-external-pause\";\nimport { loadExternalPushInteraction } from \"@tsparticles/interaction-external-push\";\nimport { loadExternalRemoveInteraction } from \"@tsparticles/interaction-external-remove\";\nimport { loadExternalRepulseInteraction } from \"@tsparticles/interaction-external-repulse\";\nimport { loadExternalSlowInteraction } from \"@tsparticles/interaction-external-slow\";\nimport { loadImageShape } from \"@tsparticles/shape-image\";\nimport { loadLifeUpdater } from \"@tsparticles/updater-life\";\nimport { loadLineShape } from \"@tsparticles/shape-line\";\nimport { loadParallaxMover } from \"@tsparticles/move-parallax\";\nimport { loadParticlesAttractInteraction } from \"@tsparticles/interaction-particles-attract\";\nimport { loadParticlesCollisionsInteraction } from \"@tsparticles/interaction-particles-collisions\";\nimport { loadParticlesLinksInteraction } from \"@tsparticles/interaction-particles-links\";\nimport { loadPolygonShape } from \"@tsparticles/shape-polygon\";\nimport { loadRotateUpdater } from \"@tsparticles/updater-rotate\";\nimport { loadSquareShape } from \"@tsparticles/shape-square\";\nimport { loadStarShape } from \"@tsparticles/shape-star\";\nimport { loadStrokeColorUpdater } from \"@tsparticles/updater-stroke-color\";\nexport async function loadSlim(engine, refresh = true) {\n    engine.checkVersion(\"3.8.1\");\n    await loadParallaxMover(engine, false);\n    await loadExternalAttractInteraction(engine, false);\n    await loadExternalBounceInteraction(engine, false);\n    await loadExternalBubbleInteraction(engine, false);\n    await loadExternalConnectInteraction(engine, false);\n    await loadExternalGrabInteraction(engine, false);\n    await loadExternalPauseInteraction(engine, false);\n    await loadExternalPushInteraction(engine, false);\n    await loadExternalRemoveInteraction(engine, false);\n    await loadExternalRepulseInteraction(engine, false);\n    await loadExternalSlowInteraction(engine, false);\n    await loadParticlesAttractInteraction(engine, false);\n    await loadParticlesCollisionsInteraction(engine, false);\n    await loadParticlesLinksInteraction(engine, false);\n    await loadEasingQuadPlugin(engine, false);\n    await loadEmojiShape(engine, false);\n    await loadImageShape(engine, false);\n    await loadLineShape(engine, false);\n    await loadPolygonShape(engine, false);\n    await loadSquareShape(engine, false);\n    await loadStarShape(engine, false);\n    await loadLifeUpdater(engine, false);\n    await loadRotateUpdater(engine, false);\n    await loadStrokeColorUpdater(engine, false);\n    await loadBasic(engine, refresh);\n}\n"],
  "mappings": "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",
  "names": []
}
